{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Partner Store Apis",
    "description": "APIs for Cloud Solution Provider partners that manage customer accounts, place orders, manage subscriptions, and handle support requests.",
    "version": "v1"
  },
  "host": "api.partnercenter.microsoft.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v{version}/offers/{offer_id}/addons": {
      "get": {
        "tags": [
          "AddOnOffers"
        ],
        "summary": "Retrieves all add-on offers of an offer using country and locale information.",
        "operationId": "Get /v{version}/offers/{offer_id}/addons?country={country_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "offer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "country",
            "in": "query",
            "description": "The country information. Two letter representation of country"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested add-on offers.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/addons": {
      "get": {
        "tags": [
          "AddOnSubscriptions"
        ],
        "summary": "Retrieves all add-on subscriptions of a subscription for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/addons",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested add-on subscription information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscription]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/carts/{cart_id}/checkout": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Places the order using an existing cart.",
        "operationId": "Post /v{version}/customers/{customer_id}/carts/{cart_id}/checkout",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cart_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the order result information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.CartCheckoutResult"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/countryvalidationrules/{country}": {
      "get": {
        "tags": [
          "CountryValidationRules"
        ],
        "summary": "Gets the market validation data.",
        "operationId": "Get /v{version}/countryvalidationrules/{country}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "country",
            "in": "path",
            "required": true,
            "description": "The country."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Returns validation rules in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CountryValidationRules"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a segment of a partner's customers. Optional filtering of customers can also be applied.\r\n            Customers can only be filtered by a string which their company name or domain name starts with. Full search is not supported currently.\r\n            Customers can be filtered using a {Microsoft.Partner.Sdk.Contracts.V1.Query.Filters.FieldFilterOperation.StartsWith} filter operation and specifying either: DisplayName (Company name) or DefaultDomainName\r\n            as the filter field.",
        "operationId": "Get /v{version}/customers?filter={filter_value}&size={size_value}&seekOperation={seekOperation_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "An optional customers filter. This is a Json object that looks like:\r\n            {\r\n            \"Field\": \"your desired filter field\",\r\n            \"Operator\": \"StartsWith\"\r\n            \"Value\": \"Your search string\"\r\n            }"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The maximum number of customers to return.",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of customers that match the filter.  A continuation token is included if the response is paged by the page size. This token can be passed to /customers?seek=<seek> to seek customer results.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Customer]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates the customer profile.",
        "operationId": "Post /v{version}/customers",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "customerProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
            },
            "description": "The new customer information."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The newly created customer information is embedded in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a single customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested customer information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes a customer tenant from a testing in production account.",
        "operationId": "Delete /v{version}/customers/{customer_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The customer was successfully deleted from the TIP account."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Patch operation is only valid when customer.RelationshipToPartner == CustomerPartnerRelationship.None \r\n            and it is used to remove the the Partner Customer reseller relationship.",
        "operationId": "Patch /v{version}/customers/{customer_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "customer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
            },
            "description": "The Customer data."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the Partner Customer reseller relationship removed.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/directoryroles": {
      "get": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Gets all the directory roles supported for customers.",
        "operationId": "Get /v{version}/customers/{customer_id}/directoryroles?role_id={role_id_value}&size={size_value}&seekOperation={seekOperation_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of supported customer directory roles for all customers.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Adds a new user member to a directory role with a given role id.",
        "operationId": "Post /v{version}/customers/{customer_id}/directoryroles?role_id={role_id_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "name": "userMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            },
            "description": "The new user member to add."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "The request was successful. The response body will contain the newly created user member.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Removes a user member of given member id from directory role with a given role id.",
        "operationId": "Delete /v{version}/customers/{customer_id}/directoryroles?member_id={member_id_value}&role_id={role_id_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "member_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The user member was successfully removed from the directory role."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/directoryroles/{role_id}/usermembers": {
      "get": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Gets all the directory roles supported for customers.",
        "operationId": "Get /v{version}/customers/{customer_id}/directoryroles/{role_id}/usermembers?size={size_value}&seekOperation={seekOperation_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of supported customer directory roles for all customers.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Adds a new user member to a directory role with a given role id.",
        "operationId": "Post /v{version}/customers/{customer_id}/directoryroles/{role_id}/usermembers",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "name": "userMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            },
            "description": "The new user member to add."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "The request was successful. The response body will contain the newly created user member.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/directoryroles/{role_id}/usermembers/{member_id}": {
      "delete": {
        "tags": [
          "Staged",
          "CustomerDirectoryRoleManagement"
        ],
        "summary": "Removes a user member of given member id from directory role with a given role id.",
        "operationId": "Delete /v{version}/customers/{customer_id}/directoryroles/{role_id}/usermembers/{member_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "member_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The user member was successfully removed from the directory role."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/analytics/licenses/usage": {
      "get": {
        "tags": [
          "CustomerLicenseInsights"
        ],
        "summary": "Retunrs usage insights of customer's licenses",
        "operationId": "Get /v{version}/customers/{customer_id}/analytics/licenses/usage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the usage insights.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/analytics/licenses/deployment": {
      "get": {
        "tags": [
          "CustomerLicenseInsights"
        ],
        "summary": "Return deployment insights of customer's licenses",
        "operationId": "Get /v{version}/customers/{customer_id}/analytics/licenses/deployment",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the deployment insights.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/offercategories": {
      "get": {
        "tags": [
          "CustomerOfferCategory"
        ],
        "summary": "Gets all offer categories for a customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/offercategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the offer categories.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.OfferCategory]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/offers": {
      "get": {
        "tags": [
          "CustomerOffers"
        ],
        "summary": "Retrieves the offers available for the customer to purchase.",
        "operationId": "Get /v{version}/customers/{customer_id}/offers?offer_category_id={offer_category_id_value}&offset={offset_value}&size={size_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "offer_category_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query",
            "description": "The page offset. Optional parameter",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The page size. Optional parameter",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of offers available for the customer to purchase.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/offers/{offer_id}/addons": {
      "get": {
        "tags": [
          "CustomerOffers"
        ],
        "summary": "Retrieves the addons under the provided offer that are available for the customer to purchase.",
        "operationId": "Get /v{version}/customers/{customer_id}/offers/{offer_id}/addons",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "offer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of addons for the provided offer that are available for the customer to purchase.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/profiles/billing": {
      "get": {
        "tags": [
          "CustomerProfile"
        ],
        "summary": "Retrieves a customer's billing profile.",
        "operationId": "Get /v{version}/customers/{customer_id}/profiles/billing",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested customer's billing profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "CustomerProfile"
        ],
        "summary": "Updates a customer's billing profile.",
        "operationId": "Put /v{version}/customers/{customer_id}/profiles/billing",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "customerBillingProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile"
            },
            "description": "The new customer billing profile information."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated billing profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/profiles/company": {
      "get": {
        "tags": [
          "CustomerProfile"
        ],
        "summary": "Retrieves a customer's company profile.",
        "operationId": "Get /v{version}/customers/{customer_id}/profiles/company",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the company profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerCompanyProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/usagesummary": {
      "get": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Retrieves the usage summary for a customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/usagesummary",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the usage summary.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerUsageSummary"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/usagerecords": {
      "get": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Retrieves the usage records of customers for a partner.",
        "operationId": "Get /v{version}/customers/usagerecords",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the partner's monthly usage records for all of its customers.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/managedservices": {
      "get": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Retrieves a customer's list of managed services customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/managedservices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of managed services.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ManagedService]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/usagebudget": {
      "get": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Retrieves the customer spending budget.",
        "operationId": "Get /v{version}/customers/{customer_id}/usagebudget",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested customer's usage spending budget information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Updates the customer spending budget.",
        "operationId": "Patch /v{version}/customers/{customer_id}/usagebudget",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "customerSpendingBudget",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
            },
            "description": "The customer spending budget."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The specified usage spending budget has been updated.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/relationships": {
      "get": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Retrieves a segment of a partner's resellers for a specific customer Id.",
        "operationId": "Get /v{version}/customers/{customer_id}/relationships",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of partner relationships associated with the specified customer.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/relationships/partner": {
      "delete": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Removes reseller relationships\r\n            This route will be purged in future. Please use \"{customer_id}/CustomerPartnerRelationships/reseller\"",
        "operationId": "Delete /v{version}/customers/{customer_id}/relationships/partner",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The Partner Customer relationship is successfully deleted."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/CustomerPartnerRelationships/reseller": {
      "delete": {
        "tags": [
          "CustomerResources"
        ],
        "summary": "Removes Partner Customer reseller relationship",
        "operationId": "Delete /v{version}/customers/{customer_id}/CustomerPartnerRelationships/reseller",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The Partner Customer reseller relationship is successfully deleted."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/servicerequests/{service_request_id}": {
      "get": {
        "tags": [
          "CustomerServiceRequests"
        ],
        "summary": "Gets the incident details for an incident created for a customer",
        "operationId": "Get /v{version}/customers/{customer_id}/servicerequests/{service_request_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "service_request_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested customer's service request.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "CustomerServiceRequests"
        ],
        "summary": "Updates the incident details for an incident created for a customer",
        "operationId": "Patch /v{version}/customers/{customer_id}/servicerequests/{service_request_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "service_request_id",
            "in": "path",
            "required": true
          },
          {
            "name": "serviceRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            },
            "description": "Service request with details to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the customer's updated service request.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/servicerequests": {
      "get": {
        "tags": [
          "CustomerServiceRequests"
        ],
        "summary": "Gets the service requests.",
        "operationId": "Get /v{version}/customers/{customer_id}/servicerequests?filter={filter_value}&offset={offset_value}&size={size_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "The filter."
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query",
            "description": "The offset",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The size.",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested customer's service requests.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscribedskus": {
      "get": {
        "tags": [
          "Staged",
          "CustomerSubscribedSkus"
        ],
        "summary": "Method to get all available skus in a customer tenant.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscribedskus?licenseGroupIds={licenseGroupIds_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "name": "licenseGroupIds",
            "in": "query",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "group1",
                "group2",
                "group3"
              ]
            },
            "description": "license group ids (ex: \"Group1\" which means AAD products, \"Group2\" which means MDollar products)."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the product SKUs available for license assignment.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/users/{user_id}/licenses": {
      "get": {
        "tags": [
          "Staged",
          "CustomerUserLicenseManagement"
        ],
        "summary": "Method to get customer's user list of assigned licenses.",
        "operationId": "Get /v{version}/customers/{customer_id}/users/{user_id}/licenses?licenseGroupIds={licenseGroupIds_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "name": "licenseGroupIds",
            "in": "query",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "enum": [
                "none",
                "group1",
                "group2",
                "group3"
              ]
            },
            "description": "license group ids (ex: \"Group1\" which means AAD products, \"Group2\" which means MDollar products)."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of licenses.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/users/{user_id}/licenseupdates": {
      "post": {
        "tags": [
          "Staged",
          "CustomerUserLicenseManagement"
        ],
        "summary": "Assign licenses to a user.\r\n            The api serves three scenarios:\r\n            1. Add license to a customer user.\r\n            2. Remove license from a customer user.\r\n            3. Update existing license for a customer user.",
        "operationId": "Post /v{version}/customers/{customer_id}/users/{user_id}/licenseupdates",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "licenseUpdateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseUpdate"
            },
            "description": "The assign license request which contains the necessary inputs for license assignment."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseUpdate"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/users": {
      "get": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Method to get all users in a customer tenant by page.",
        "operationId": "Get /v{version}/customers/{customer_id}/users?filter={filter_value}&size={size_value}&seekOperation={seekOperation_value}&sortOption.sortField={sortOption.sortField_value}&sortOption.sortDirection={sortOption.sortDirection_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "An optional customer's users filter. This is a JSON object that looks like:\r\n            {\r\n                \"Field\": \"your desired filter field\",\r\n                \"Operator\": \"StartsWith\"\r\n                \"Value\": \"Your search string\"\r\n            }"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The maximum number of customer users to return.",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "sortOption.sortField",
            "in": "query",
            "description": "Gets or sets the sort field."
          },
          {
            "type": "string",
            "name": "sortOption.sortDirection",
            "in": "query",
            "enum": [
              "ascending",
              "descending"
            ],
            "description": "Gets or sets the sort direction."
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains a list of customer users that match the filter. A continuation token is included if the response is paged by the page size. This token can be passed to /customers/{customer_id}/users?seek=<seek> to get the next page.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.CustomerUser]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Creates the customer user.",
        "operationId": "Post /v{version}/customers/{customer_id}/users",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
            },
            "description": "The new customer user."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "The request was successful. The response body contains the created customer user.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Deletes a customer user from customer tenant.",
        "operationId": "Delete /v{version}/customers/{customer_id}/users?user_id={user_id_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The user was successfully deleted from the customer's tenant."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Updates the attributes of user in customer tenant.",
        "operationId": "Patch /v{version}/customers/{customer_id}/users?user_id={user_id_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "query"
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
            },
            "description": "User attribute class."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The attributes of the user were successfully updated."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/users/{user_id}": {
      "get": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Method to get customer's user details.",
        "operationId": "Get /v{version}/customers/{customer_id}/users/{user_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the details of the customer user.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Deletes a customer user from customer tenant.",
        "operationId": "Delete /v{version}/customers/{customer_id}/users/{user_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The user was successfully deleted from the customer's tenant."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Updates the attributes of user in customer tenant.",
        "operationId": "Patch /v{version}/customers/{customer_id}/users/{user_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
            },
            "description": "User attribute class."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The attributes of the user were successfully updated."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/users/{user_id}/directoryroles": {
      "get": {
        "tags": [
          "Staged",
          "CustomerUserManagement"
        ],
        "summary": "Retrieves a customer user's directory roles.",
        "operationId": "Get /v{version}/customers/{customer_id}/users/{user_id}/directoryroles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested user's directory roles.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/deviceBatches": {
      "get": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Retrieves a customer's device batches.",
        "operationId": "Get /v{version}/customers/{customer_id}/deviceBatches",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The requested customer's device batches are returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "uploads the list of customer's devices for a given device batch",
        "operationId": "Post /v{version}/customers/{customer_id}/deviceBatches",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "deviceBatch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatchCreationRequest"
            },
            "description": "The device batch with devices to be uploaded."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "202": {
            "description": "The request was successfully accepted. The link to query the uploaded customer's devices status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/batchJobStatus/{batchUploadTracking_id}": {
      "get": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Retrieve the status of a batch upload",
        "operationId": "Get /v{version}/customers/{customer_id}/batchJobStatus/{batchUploadTracking_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "batchUploadTracking_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The status of the batch upload are returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.BatchUploadDetails"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/DevicePolicyUpdates": {
      "patch": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Update a list of devices with a policy",
        "operationId": "Patch /v{version}/customers/{customer_id}/DevicePolicyUpdates",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "updateDeviceRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DevicePolicyUpdateRequest"
            },
            "description": "List of devices"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "202": {
            "description": "The request was successfully accepted. The link to query the updated customer's devices status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices": {
      "get": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Retrieves the list of customer's devices for a given device batch",
        "operationId": "Get /v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "deviceBatch_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The requested customer's devices are returned in the response body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
              }
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "uploads the list of customer's devices for a given device batch",
        "operationId": "Post /v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "deviceBatch_id",
            "in": "path",
            "required": true
          },
          {
            "name": "devices",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
              }
            },
            "description": "The list of devices to be uploaded."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "202": {
            "description": "The request was successfully accepted. The link to query the uploaded customer's devices status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices/{device_id}": {
      "put": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "update a customer device with configuration policy.",
        "operationId": "Put /v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices/{device_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "deviceBatch_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "name": "device",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
            },
            "description": "The device to be updated with the policy"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The updated customer's device is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Delete a customer device.",
        "operationId": "Delete /v{version}/customers/{customer_id}/deviceBatches/{deviceBatch_id}/devices/{device_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "deviceBatch_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "device_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The device was successfully deleted."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/policies": {
      "get": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Get the policies associated with a customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/policies",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The list of policies associated with the customer is returned in the response body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
              }
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Create a new policy under the customer.",
        "operationId": "Post /v{version}/customers/{customer_id}/policies",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
            },
            "description": "ConfigurationPolicy to be created."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The newly created policy is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/policies/{policy_id}": {
      "get": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Get a policy by ID associated with a customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/policies/{policy_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The policy associated with the ID and customer is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Edit a policy by ID associated with a customer.",
        "operationId": "Put /v{version}/customers/{customer_id}/policies/{policy_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
            },
            "description": "Policy to be updated"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The policy associated with the ID and customer is edited and the response in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DeviceDeployment"
        ],
        "summary": "Delete a customer policy.",
        "operationId": "Delete /v{version}/customers/{customer_id}/policies/{policy_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "policy_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "The policy was successfully deleted."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/domains/{domain}": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Add verified domain.",
        "operationId": "Post /v{version}/domains/{domain}?customer_id={customer_id_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "query"
          },
          {
            "name": "verifiedDomain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.VerifiedDomain"
            },
            "description": "Domain."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "domain",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The verified domain is added.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.Domain"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "head": {
        "tags": [
          "Domains"
        ],
        "summary": "Determine if the domain is available.",
        "operationId": "Head /v{version}/domains/{domain}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "domain",
            "in": "path",
            "required": true,
            "description": "Domain."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The domain is already in use.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/verifieddomain": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Add verified domain.",
        "operationId": "Post /v{version}/customers/{customer_id}/verifieddomain",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "verifiedDomain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.VerifiedDomain"
            },
            "description": "Domain."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The verified domain is added.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.Domain"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "head": {
        "tags": [
          "Domains"
        ],
        "summary": "Determine if the domain is available.",
        "operationId": "Head /v{version}/customers/{customer_id}/verifieddomain",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "domain",
            "in": "query",
            "required": true,
            "description": "Domain."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The domain is already in use.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/insiderprograms": {
      "get": {
        "tags": [
          "InsiderPrograms"
        ],
        "summary": "gets the list of insider programs available for a user.",
        "operationId": "Get /v{version}/insiderprograms",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The list of insider programs available is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Flight.InsiderProgram"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "InsiderPrograms"
        ],
        "summary": "Updates the insider programs preferences for a user",
        "operationId": "Put /v{version}/insiderprograms",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "insiderProgram",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Flight.InsiderProgram"
            },
            "description": "Program to be opted in/out of"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Flight.InsiderProgram"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/migrations/syndication": {
      "post": {
        "tags": [
          "Migrations"
        ],
        "summary": "Creates the batch for migrating customers from Syndication to CSP",
        "operationId": "Post /v{version}/migrations/syndication",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "migrationBatch",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigration"
            },
            "description": "Migration batch to be created."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigration"
            }
          },
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigration"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/migrations/syndication/{migrationBatchId}": {
      "get": {
        "tags": [
          "Migrations"
        ],
        "summary": "Gets the status of a migration batch from Syndication to CSP",
        "operationId": "Get /v{version}/migrations/syndication/{migrationBatchId}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "migrationBatchId",
            "in": "path",
            "required": true,
            "description": "ID of the migration batch"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains information about the migration status.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigrationStatus"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/migrations/syndication/{migrationBatchId}/{mosiCustomerId}": {
      "get": {
        "tags": [
          "Migrations"
        ],
        "summary": "Gets the status of a migration batch from Syndication to CSP by customer",
        "operationId": "Get /v{version}/migrations/syndication/{migrationBatchId}/{mosiCustomerId}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "migrationBatchId",
            "in": "path",
            "required": true,
            "description": "ID of the migration batch"
          },
          {
            "type": "string",
            "name": "mosiCustomerId",
            "in": "path",
            "required": true,
            "description": "Filter can be customer ID"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The requested partner's migration batch status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigrationStatus"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/users/{user_id}/preferences/notifications/{NotificationArea}/{channelType}": {
      "put": {
        "tags": [
          "NotificationPreference"
        ],
        "summary": "Update the notification preferences for a particular config",
        "operationId": "Put /v{version}/users/{user_id}/preferences/notifications/{NotificationArea}/{channelType}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "NotificationArea",
            "in": "path",
            "required": true,
            "enum": [
              "none",
              "ratedUsage",
              "serviceHealth"
            ]
          },
          {
            "type": "string",
            "name": "channelType",
            "in": "path",
            "required": true,
            "enum": [
              "none",
              "email",
              "web"
            ],
            "description": "channel type"
          },
          {
            "name": "communicationPreference",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.CommunicationPreference"
            },
            "description": "communication preference"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The respone body contains the notification profile.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.NotificationPreference"
              }
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/users/{user_id}/preferences/notifications/{notificationArea}/{channelType}": {
      "get": {
        "tags": [
          "NotificationPreference"
        ],
        "summary": "Get  the notification preferences for a particular config",
        "operationId": "Get /v{version}/users/{user_id}/preferences/notifications/{notificationArea}/{channelType}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "notificationArea",
            "in": "path",
            "required": true,
            "enum": [
              "none",
              "ratedUsage",
              "serviceHealth"
            ],
            "description": "Notification area"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "channelType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The notification profile is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.NotificationPreference"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/offers": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "Retrieves all offers of a partner using country and locale information.",
        "operationId": "Get /v{version}/offers?country={country_value}&offer_category_id={offer_category_id_value}&offset={offset_value}&size={size_value}&product_id={product_id_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "country",
            "in": "query",
            "description": "The country information. Two letter representation of country"
          },
          {
            "type": "string",
            "name": "offer_category_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query",
            "description": "The page offset. Optional parameter",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The page size. Optional parameter",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "product_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the offers.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/offers/{offer_id}": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "Retrieves an offer by its identifier of a partner using country and locale information.",
        "operationId": "Get /v{version}/offers/{offer_id}?country={country_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "offer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "country",
            "in": "query",
            "description": "The country information. Two letter representation of country"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response contains the offer.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Offer"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/offercategories": {
      "get": {
        "tags": [
          "OfferCategory"
        ],
        "summary": "Gets all offer categories in country and/or locale.",
        "operationId": "Get /v{version}/offercategories?country={country_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "country",
            "in": "query",
            "description": "The country."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Returns offer categories in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.OfferCategory]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves all orders for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/orders?indirectResellerId={indirectResellerId_value}&billingType={billingType_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "indirectResellerId",
            "in": "query",
            "description": "Optional: The indirect reseller Id."
          },
          {
            "type": "string",
            "name": "billingType",
            "in": "query",
            "enum": [
              "unknown",
              "monthly",
              "annual",
              "none",
              "oneTime"
            ],
            "description": "Optionally filters result by the billing type"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the orders.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Order]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Places the order.\r\n            The api serves two scenarios:\r\n            1. New offer purchase: Place an order to buy an offer for customer\r\n            2. Modify subscription to have product SKU changes:\r\n            1. To upgrade subscription which will  change billing model\r\n            2. The upgrade changes the product SKU, so the order has to be a linked purchase with a reference to entitlement uri in order line items.",
        "operationId": "Post /v{version}/customers/{customer_id}/orders",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "order",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
            },
            "description": "The order object with order-line items information."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the order information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/orders/{order_id}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves an order by identifier for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/orders/{order_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "order_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the order information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Order"
        ],
        "summary": "Update the order.\r\n            The api serves two scenarios:\r\n            1. New add-on offer purchase: Place an order to buy an add-on offer for customer\r\n            2. Modify subscription to have product SKU changes:\r\n            1. To upgrade subscription which will  change billing model\r\n            2. The upgrade changes the product SKU, so the order has to be a linked purchase with a reference to entitlement uri in order line items.",
        "operationId": "Patch /v{version}/customers/{customer_id}/orders/{order_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "order_id",
            "in": "path",
            "required": true
          },
          {
            "name": "order",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
            },
            "description": "The order object with order-line items information."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated order information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/analytics/licenses/deployment": {
      "get": {
        "tags": [
          "PartnerLicenseInsights"
        ],
        "summary": "Returns the deployment insights of partner's all licenses",
        "operationId": "Get /v{version}/analytics/licenses/deployment",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The requested partner licenses deployment analytics information is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/analytics/licenses/usage": {
      "get": {
        "tags": [
          "PartnerLicenseInsights"
        ],
        "summary": "Returns usage insights of partner's all licenses",
        "operationId": "Get /v{version}/analytics/licenses/usage",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The requested partner licenses usage analytics information is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/organization": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the organization profile.",
        "operationId": "Get /v{version}/profiles/organization",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the organization profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OrganizationProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Updates the organization profile",
        "operationId": "Put /v{version}/profiles/organization",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "organizationProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OrganizationProfile"
            },
            "description": "organization profile to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated organization profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OrganizationProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/legalbusiness": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the legal business profile.",
        "operationId": "Get /v{version}/profiles/legalbusiness?vettingVersion={vettingVersion_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "vettingVersion",
            "in": "query",
            "enum": [
              "none",
              "current",
              "lastFinalized"
            ],
            "description": "(Optional) The vetting version. The default value is set to Current."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the legal business profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.LegalBusinessProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Updates the legal business profile",
        "operationId": "Put /v{version}/profiles/legalbusiness",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "legalBusinessProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.LegalBusinessProfile"
            },
            "description": "Legal business profile to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated legal business profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.LegalBusinessProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/support": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the partner support profile",
        "operationId": "Get /v{version}/profiles/support",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested support profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SupportProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Updates the partner support profile",
        "operationId": "Put /v{version}/profiles/support",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "supportProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SupportProfile"
            },
            "description": "Support profile to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated support profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SupportProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/billing": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the billing profile",
        "operationId": "Get /v{version}/profiles/billing",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the billing profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.BillingProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Updates the billing profile",
        "operationId": "Put /v{version}/profiles/billing",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "billingProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.BillingProfile"
            },
            "description": "Billing profile to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated billing profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.BillingProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/partnernetworkprofile": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the Microsoft partner network profile",
        "operationId": "Get /v{version}/profiles/partnernetworkprofile?mpnId={mpnId_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "mpnId",
            "in": "query"
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the partner network profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.MpnProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/profiles/mpn": {
      "get": {
        "tags": [
          "PartnerProfile"
        ],
        "summary": "Gets the MPN profile",
        "operationId": "Get /v{version}/profiles/mpn?mpnId={mpnId_value}&verifyAdvisor={verifyAdvisor_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "mpnId",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "verifyAdvisor",
            "in": "query"
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the partner network profile.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.MpnProfile"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/relationships": {
      "get": {
        "tags": [
          "Staged",
          "PartnerRelationships"
        ],
        "summary": "Retrieves a segment of a partner's resellers. Optional filtering of partner relationships can also be applied.\r\n            Resellers can only be filtered by a string which their name. Full search is not supported currently.\r\n            Resellers can be filtered using a {Microsoft.Partner.Sdk.Contracts.V1.Query.Filters.FieldFilterOperation.StartsWith} filter operation and specifying: Name (Value added reseller name)\r\n            as the filter field.",
        "operationId": "Get /v{version}/relationships?relationship_type={relationship_type_value}&filter={filter_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "relationship_type",
            "in": "query",
            "enum": [
              "none",
              "isIndirectResellerOf",
              "isIndirectCloudSolutionProviderOf"
            ]
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "An optional customers filter. This is a Json object that looks like:\r\n            {\r\n            \"Field\": \"your desired filter field\",\r\n            \"Operator\": \"StartsWith\"\r\n            \"Value\": \"Your search string\"\r\n            }"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of partner relationships.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/relationships/{partner_id}/customer": {
      "get": {
        "tags": [
          "Staged",
          "PartnerRelationships"
        ],
        "summary": "Retrieves a segment of a partner's resellers. Optional filtering of partner relationships can also be applied.\r\n            Resellers can only be filtered by a string which their name. Full search is not supported currently.\r\n            Resellers can be filtered using a {Microsoft.Partner.Sdk.Contracts.V1.Query.Filters.FieldFilterOperation.StartsWith} filter operation and specifying: Name (Value added reseller name)\r\n            as the filter field.",
        "operationId": "Get /v{version}/relationships/{partner_id}/customer?relationship_type={relationship_type_value}&filter={filter_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "relationship_type",
            "in": "query",
            "enum": [
              "none",
              "isIndirectResellerOf",
              "isIndirectCloudSolutionProviderOf"
            ]
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "An optional customers filter. This is a Json object that looks like:\r\n            {\r\n            \"Field\": \"your desired filter field\",\r\n            \"Operator\": \"StartsWith\"\r\n            \"Value\": \"Your search string\"\r\n            }"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "partner_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of partner relationships.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/relationships/{partner_id}/customer/{customer_id}": {
      "patch": {
        "tags": [
          "PartnerRelationships"
        ],
        "summary": "Retries any failed relationships between Customer Distributor and Reseller.",
        "operationId": "Patch /v{version}/relationships/{partner_id}/customer/{customer_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "partner_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/usagesummary": {
      "get": {
        "tags": [
          "PartnerUsage"
        ],
        "summary": "Retrieves the usage summary of a partner.",
        "operationId": "Get /v{version}/usagesummary",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the usage summary.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.PartnerUsageSummary"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/preferences/catalog/offers": {
      "get": {
        "tags": [
          "Staged",
          "Preferences"
        ],
        "summary": "Retrieves all preferred offer ids for a partner.",
        "operationId": "Get /v{version}/preferences/catalog/offers",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the preferred offer IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Staged",
          "Preferences"
        ],
        "summary": "Sets the preferred offer ids for a partner.",
        "operationId": "Put /v{version}/preferences/catalog/offers",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offerIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "The collection preferred offer ids to persist."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the preferred offer IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/ratecards/azure": {
      "get": {
        "tags": [
          "RateCards"
        ],
        "summary": "Gets the Azure rate card which provides real-time prices for Azure offers.",
        "operationId": "Get /v{version}/ratecards/azure?currency={currency_value}&region={region_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "currency",
            "in": "query",
            "description": "An optional three letter ISO code for the currency in which the resource rates will be provided.\r\n            The default is the currency associated with the market in the partner's profile."
          },
          {
            "type": "string",
            "name": "region",
            "in": "query",
            "description": "An optional two-letter ISO country/region code that indicates the market where the offer is purchased.\r\n            The default is the country/region code set in the partner profile."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the Azure rate card resource.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureRateCard"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/ratecards/azure-shared": {
      "get": {
        "tags": [
          "RateCards"
        ],
        "summary": "Gets the Azure rate card which provides real-time prices for Azure CSL offers.",
        "operationId": "Get /v{version}/ratecards/azure-shared?currency={currency_value}&region={region_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "currency",
            "in": "query",
            "description": "An optional three letter ISO code for the currency in which the resource rates will be provided.\r\n            The default is the currency associated with the market in the partner's profile."
          },
          {
            "type": "string",
            "name": "region",
            "in": "query",
            "description": "An optional two-letter ISO country/region code that indicates the market where the offer is purchased.\r\n            The default is the country/region code set in the partner profile."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the Azure rate card resource.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureRateCard"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/relationshiprequests": {
      "get": {
        "tags": [
          "RelationshipRequest"
        ],
        "operationId": "Get /v{version}/customers/relationshiprequests?indirectCloudSolutionProviderId={indirectCloudSolutionProviderId_value}&indirectResellerId={indirectResellerId_value}&dualRoleIndirectRelationship={dualRoleIndirectRelationship_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "indirectCloudSolutionProviderId",
            "in": "query"
          },
          {
            "type": "string",
            "name": "indirectResellerId",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "dualRoleIndirectRelationship",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the relationship request URL.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.RelationshipRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/roles": {
      "get": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Gets all the roles available.",
        "operationId": "Get /v{version}/roles?role_id={role_id_value}&size={size_value}&sortField={sortField_value}&sortDirection={sortDirection_value}&seekOperation={seekOperation_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sortDirection",
            "in": "query"
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of supported roles.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Adds a new user member to a role with a given role id and id token passed in the header.\r\n            Defaults to adding to applicable account if none is passed.",
        "operationId": "Post /v{version}/roles?role_id={role_id_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "name": "userMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            },
            "description": "The new user member to add."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Removes a user member of given member id from role with a given role id and id token passed in the header.\r\n            Defaults to removing from applicable account.",
        "operationId": "Delete /v{version}/roles?role_id={role_id_value}&member_id={member_id_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "role_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "member_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/roles/{role_id}/usermembers": {
      "get": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Gets all the roles available.",
        "operationId": "Get /v{version}/roles/{role_id}/usermembers?size={size_value}&sortField={sortField_value}&sortDirection={sortDirection_value}&seekOperation={seekOperation_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "name": "sortDirection",
            "in": "query"
          },
          {
            "type": "string",
            "name": "seekOperation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the list of supported roles.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Adds a new user member to a role with a given role id and id token passed in the header.\r\n            Defaults to adding to applicable account if none is passed.",
        "operationId": "Post /v{version}/roles/{role_id}/usermembers",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "name": "userMember",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            },
            "description": "The new user member to add."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/roles/{role_id}/usermembers/{member_id}": {
      "delete": {
        "tags": [
          "Staged",
          "RoleManagement"
        ],
        "summary": "Removes a user member of given member id from role with a given role id and id token passed in the header.\r\n            Defaults to removing from applicable account.",
        "operationId": "Delete /v{version}/roles/{role_id}/usermembers/{member_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "member_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/serviceincidents/office": {
      "get": {
        "tags": [
          "ServiceIncident"
        ],
        "summary": "Retrieves all office service health incidents for a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/serviceincidents/office?filter={filter_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Filter can be MessageType, StartDate or EndDate"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the office incidents information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/serviceincidents/office/count": {
      "get": {
        "tags": [
          "ServiceIncident"
        ],
        "summary": "Retrieves all office service health incidents for a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/serviceincidents/office/count?filter={filter_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Filter can be MessageType, StartDate or EndDate"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the number of office incidents.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/serviceincidents/office": {
      "get": {
        "tags": [
          "ServiceIncident"
        ],
        "summary": "Retrieves all office service health incidents for a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/serviceincidents/office?filter={filter_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "Filter can be MessageType, StartDate or EndDate"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the office incidents information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/servicerequests": {
      "get": {
        "tags": [
          "ServiceRequests"
        ],
        "summary": "Gets the service requests.",
        "operationId": "Get /v{version}/servicerequests?filter={filter_value}&offset={offset_value}&size={size_value}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "filter",
            "in": "query",
            "description": "The filter."
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query",
            "description": "The index",
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "The size.",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Requested service requests are returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/servicerequests/{service_request_id}": {
      "get": {
        "tags": [
          "ServiceRequests"
        ],
        "summary": "Gets a service request",
        "operationId": "Get /v{version}/servicerequests/{service_request_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "service_request_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the service request.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "ServiceRequests"
        ],
        "summary": "Updates a service request",
        "operationId": "Patch /v{version}/servicerequests/{service_request_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "service_request_id",
            "in": "path",
            "required": true
          },
          {
            "name": "serviceRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            },
            "description": "Service Request With details to update"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the updated service request.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/servicerequests/{agent_locale}": {
      "post": {
        "tags": [
          "ServiceRequests"
        ],
        "summary": "Creates a service request",
        "operationId": "Post /v{version}/servicerequests/{agent_locale}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "agent_locale",
            "in": "path",
            "required": true
          },
          {
            "name": "serviceRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            },
            "description": "The service request details."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Created service request is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/servicerequests/supporttopics": {
      "get": {
        "tags": [
          "ServiceRequestSupportTopics"
        ],
        "summary": "Gets a list of support topics",
        "operationId": "Get /v{version}/servicerequests/supporttopics",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the support topics.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.SupportTopic]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/provisioningstatus": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Retrieves a subscription provisioning status by identifier for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/provisioningstatus",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The requested customer's subscription provisioning status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SubscriptionProvisioningStatus"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/registrations": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Register an existing subscription for RI purchase.",
        "operationId": "Post /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/registrations",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "202": {
            "description": "The request was successfully accepted. The link to query the registration status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/registrationstatus": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Retrieves a subscription registration status by identifier for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/registrationstatus",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The requested customer's subscription registration status is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SubscriptionRegistrationStatus"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Retrieves all subscriptions for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions?order_id={order_id_value}&mpn_id={mpn_id_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "order_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "mpn_id",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the subscriptions.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscription]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Retrieves a subscription by identifier for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the subscription information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscription"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Subscription"
        ],
        "summary": "Updates a subscription by identifier for the customer of a partner by their active directory tenant identifier.",
        "operationId": "Patch /v{version}/customers/{customer_id}/subscriptions/{subscription_id}",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "name": "subscription",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscription"
            },
            "description": "The subscription data."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The response body contains the updated subscription information.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscription"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/conversions": {
      "get": {
        "tags": [
          "SubscriptionConversion"
        ],
        "summary": "Gets the target conversions for a trial subscription.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/conversions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the conversions.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "SubscriptionConversion"
        ],
        "summary": "Converts a trial subscription to the target conversion.",
        "operationId": "Post /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/conversions",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "name": "targetConversion",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion"
            },
            "description": "The target subscription conversion."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. Convert result is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionResult"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/supportcontact": {
      "get": {
        "tags": [
          "SubscriptionSupportContact"
        ],
        "summary": "Gets the support contact for a customer's subscription.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/supportcontact",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The requested customer's subscription support contact information is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "SubscriptionSupportContact"
        ],
        "summary": "Adds or updates the support contact for a subscription.",
        "operationId": "Put /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/supportcontact",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "name": "supportContact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact"
            },
            "description": "The support contact object."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  The updated customer's subscription support contact is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/upgrades": {
      "get": {
        "tags": [
          "SubscriptionUpgrade"
        ],
        "summary": "Gets the upgrades for a subscription.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/upgrades",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the upgrades.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "SubscriptionUpgrade"
        ],
        "summary": "Performs a subscription upgrade.",
        "operationId": "Post /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/upgrades",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "name": "targetUpgrade",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade"
            },
            "description": "The target subscription upgrade"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  Upgrade result is returned in the response body.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeResult"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/usagesummary": {
      "get": {
        "tags": [
          "SubscriptionUsage"
        ],
        "summary": "Retrieves the usage summary of a subscription.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/usagesummary",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the the subscription usage summary.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionUsageSummary"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/usagerecords/resources": {
      "get": {
        "tags": [
          "SubscriptionUsage"
        ],
        "summary": "Retrieves the monthly Azure resource usage records of a subscription.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/usagerecords/resources",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the requested usage records.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/usagerecords": {
      "get": {
        "tags": [
          "SubscriptionUsage"
        ],
        "summary": "Retrieves the monthly usage records for all the subscriptions of a given customer.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/usagerecords",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the subscription usage records.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/generatetoken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generates a token required for accessing partner api resources",
        "description": "Generates an authentication token required for accessing partner APIs.",
        "operationId": "Post /generatetoken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Only supports grant_type =jwt_token"
          }
        ],
        "responses": {
          "200": {
            "description": "The request succeeded."
          },
          "400": {
            "description": "There was missing or invalid input. The response body contains the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused because the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers can retry the request."
          }
        }
      }
    },
    "/v{version}/customers/{customer_id}/subscriptions/{subscription_id}/utilizations/azure": {
      "get": {
        "tags": [
          "Utilizations"
        ],
        "summary": "Gets the utilization for resources that belong to an Azure subscription owned by a customer of the partner.",
        "operationId": "Get /v{version}/customers/{customer_id}/subscriptions/{subscription_id}/utilizations/azure?start_time={start_time_value}&end_time={end_time_value}&size={size_value}&granularity={granularity_value}&show_details={show_details_value}&seek_operation={seek_operation_value}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscription_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "start_time",
            "in": "query",
            "format": "date-time"
          },
          {
            "type": "string",
            "name": "end_time",
            "in": "query",
            "format": "date-time"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query",
            "description": "An optional maximum number of records to return. Default is 1000. The returned resource collection will specify a next link in case there\r\n            were more utilization records available.",
            "format": "int32"
          },
          {
            "type": "string",
            "name": "granularity",
            "in": "query",
            "enum": [
              "daily",
              "hourly"
            ],
            "description": "The resource usage time granularity. Can either be daily or hourly. Defalt is daily."
          },
          {
            "type": "boolean",
            "name": "show_details",
            "in": "query"
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "seek_operation",
            "in": "query",
            "enum": [
              "next",
              "previous",
              "first",
              "last",
              "pageIndex"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains the Azure utilization records resource collection.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord]"
            }
          },
          "204": {
            "description": "Data is not available for the given start and end time. No content is returned with a retry-after header.",
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord]"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/validations/checkdomainavailability/{domain_prefix}": {
      "get": {
        "tags": [
          "Validations"
        ],
        "summary": "[Deprecated] Determine if the domain is available.",
        "operationId": "Get /v{version}/validations/checkdomainavailability/{domain_prefix}",
        "consumes": [],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "domain_prefix",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. The response body contains true if the domain is available, otherwise false.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v{version}/validations/address": {
      "post": {
        "tags": [
          "Validations"
        ],
        "summary": "Determine if the address is valid.",
        "operationId": "Post /v{version}/validations/address",
        "consumes": [
          "application/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded",
          "text/json"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/json"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
            },
            "description": "The address."
          },
          {
            "type": "string",
            "name": "version",
            "in": "path",
            "required": true,
            "enum": [
              "1.0",
              "1"
            ]
          },
          {
            "type": "string",
            "name": "MS-CorrelationId",
            "in": "header",
            "description": "A unique identifier for the call, useful in logs and network traces for troubleshooting errors. The value should be reset for every call. All operations should include this header."
          },
          {
            "type": "string",
            "name": "MS-RequestId",
            "in": "header",
            "description": "A unique identifier for the call, used to ensure idempotency. In the case of a timeout, the retry call should include the same value. Upon receiving a response (success or business failure), the value should be reset for the next call."
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.  returns success or error based on based on validity of the address."
          },
          "400": {
            "description": "There was a missing or an invalid input. The response body will provide the error details."
          },
          "401": {
            "description": "The request was not authenticated. The client needs to authenticate with the partner API service first."
          },
          "403": {
            "description": "The request was authenticated but was refused since the caller does not have the rights to invoke it."
          },
          "404": {
            "description": "The resource is not found or not available with the given input parameters."
          },
          "500": {
            "description": "The partner API service or one of its dependencies failed to fulfill the request. Callers may retry this."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountRoles.AccountRole]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountRoles.AccountRole]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountRoles.AccountRole"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountRoles.AccountRole": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountRoles.AccountRole",
      "properties": {
        "value": {
          "type": "string",
          "enum": [
            "none",
            "company",
            "limited",
            "limited_mpn",
            "mpn",
            "advisor",
            "advisor_with_dap",
            "value_added_reseller",
            "cloud_solution_provider",
            "distributor",
            "incentive",
            "referrals",
            "basic_mpn",
            "limited_basic_mpn",
            "publisher",
            "control_panel_vendor",
            "offboarding_cloud_solution_provider",
            "app_dev",
            "app_middleware",
            "azure",
            "beam",
            "bookings",
            "bot_framework",
            "bots",
            "compete",
            "cortana",
            "dev_previews",
            "edge",
            "game_publishing",
            "groove",
            "hardware",
            "i_o_s_bridge",
            "minecraft",
            "money_service",
            "m_s_i_p",
            "office",
            "office365_connectors",
            "office_developer_program",
            "ready_for10",
            "re_mix3d",
            "seller_dashboard",
            "skype_agents",
            "skype_bots",
            "u_g_c",
            "u_w_p",
            "web_pay",
            "xdp_analytics",
            "denied_party"
          ],
          "description": "Gets or sets the account role enum."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an account role."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks",
      "properties": {
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Navigation links for the resource"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Gets or sets the etag.\r\n            The object version in providers."
        },
        "objectType": {
          "type": "string",
          "description": "The type of object."
        }
      },
      "description": "Refers to the common object attributes"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Common.Link": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Common.Link",
      "properties": {
        "uri": {
          "type": "string",
          "readOnly": true,
          "description": "The URI."
        },
        "method": {
          "type": "string",
          "readOnly": true,
          "description": "The method."
        },
        "headers": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/System.Collections.Generic.KeyValuePair[System.String,System.String]"
          },
          "description": "Gets the link headers."
        }
      },
      "description": "Link represents a URI and the HTTP method which indicates the desired action for accessing the resource."
    },
    "System.Collections.Generic.KeyValuePair[System.String,System.String]": {
      "type": "object",
      "x-typeName": "System.Collections.Generic.KeyValuePair[System.String,System.String]",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountSettings.AccountSetting": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.AccountSettings.AccountSetting",
      "properties": {
        "key": {
          "type": "string",
          "enum": [
            "third_party_domain_purchases",
            "public_site_purchases"
          ],
          "description": "Gets or sets the setting key."
        },
        "value": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the setting is active or not."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an account setting key-value pair."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Offer]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Offer"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Offer": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Offer",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the offer identifier."
        },
        "providerId": {
          "type": "string",
          "description": "Gets or sets the offer provider identifier."
        },
        "providerName": {
          "type": "string",
          "description": "Gets or sets the offer provider name."
        },
        "providerLocationId": {
          "type": "string",
          "description": "Gets or sets the offer provider location identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the offer name."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets a description of the offer."
        },
        "minimumQuantity": {
          "type": "integer",
          "description": "Gets or sets the minimum quantity available.",
          "format": "int32"
        },
        "maximumQuantity": {
          "type": "integer",
          "description": "Gets or sets the maximum quantity available.",
          "format": "int32"
        },
        "rank": {
          "type": "integer",
          "description": "Gets or sets the offer rank or priority compared to other categories in the same product line.\r\n            This property should be set only if there is more than one offer for a given product line.",
          "format": "int32"
        },
        "uri": {
          "type": "string",
          "description": "Gets or sets the offer URI."
        },
        "locale": {
          "type": "string",
          "description": "Gets or sets the locale in which the offer applies."
        },
        "country": {
          "type": "string",
          "description": "Gets or sets the country/region where the offer applies."
        },
        "category": {
          "description": "Gets or sets the category.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OfferCategory"
        },
        "limitUnitOfMeasure": {
          "type": "string",
          "description": "Gets or sets value for Limit unit of measure Ex: Concurrent, LifeTime, None"
        },
        "limit": {
          "type": "integer",
          "description": "Gets or sets value for Limit",
          "format": "int32"
        },
        "termUnitOfMeasure": {
          "type": "string",
          "description": "Gets or sets value for Term unit of measure"
        },
        "term": {
          "type": "integer",
          "description": "Gets or sets value for Term",
          "format": "int32"
        },
        "prerequisiteOffers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the prerequisite offers."
        },
        "isAddOn": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether this instance is an addon."
        },
        "hasAddOns": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether this instance has addons."
        },
        "isAvailableForPurchase": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether this instance is available for purchase."
        },
        "billing": {
          "type": "string",
          "enum": [
            "none",
            "usage",
            "license"
          ],
          "description": "Gets or sets the billing type for the line item purchase. (Examples : \"none\", \"usage\", or \"license\".)"
        },
        "supportedBillingCycles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "unknown",
              "monthly",
              "annual",
              "none",
              "oneTime"
            ]
          },
          "description": "Gets or sets the billing cycles supported for this offer."
        },
        "isAutoRenewable": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the offer renews automatically."
        },
        "isInternal": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the offer is internal only."
        },
        "isMicrosoftProduct": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the offer is a microsoft product only."
        },
        "upgradeTargetOffers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of offers that this offer can be upgraded to."
        },
        "conversionTargetOffers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of offers that this offer can be converted to."
        },
        "reselleeQualifications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of resellee qualifications on a given offer.\r\n            Both the partner and customer should satisfy at least one of these qualifications to get the specific offer.\r\n            If no qualifications are specified, then the offer is available to all partners/customers."
        },
        "resellerQualifications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of reseller qualifications on a given offer.\r\n            The partner should satisfy at least one of these qualifications to get the specific offer.\r\n            If no qualifications are specified, then offers are available to all partners."
        },
        "salesGroupId": {
          "type": "string",
          "description": "Gets or sets the sales group identifier for the offer.\r\n            When placing an order, ensure that the order contains items of the sales group, if not split them."
        },
        "isTrial": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the offer is a trial offer."
        },
        "acquisitionType": {
          "type": "string",
          "enum": [
            "purchase",
            "referral"
          ],
          "description": "Gets or sets the acquisition type for the offer.\r\n            If the acquisition type is purchase, then acquiring this offer is through an order.\r\n            If the acquisition type is referral, then acquiring this offer is through a referral."
        },
        "supportedCatalogTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "sandbox",
              "live"
            ]
          },
          "description": "Gets or sets the supported catalog types."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the actions."
        },
        "product": {
          "description": "Gets or sets the product.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OfferProduct"
        },
        "unitType": {
          "type": "string",
          "description": "Gets or sets the type of the unit."
        },
        "links": {
          "description": "Gets or sets the offer's \"learn more\" link.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.OfferLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a product listed in the reseller catalog that is available to customers."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.OfferCategory": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.OfferCategory",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the category identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the category name."
        },
        "rank": {
          "type": "integer",
          "description": "Gets or sets the category rank or priority compared to other categories in the same offer. \r\n            This property should be set only if there is more than one offer category for a given offer.",
          "format": "int32"
        },
        "locale": {
          "type": "string",
          "description": "Gets or sets the locale in which the offer category applies."
        },
        "country": {
          "type": "string",
          "description": "Gets or sets the country/region where the offer category applies."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the categorization of an offer.\r\n            This includes the rank or priority of this offer category compared to others in the same product line."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.OfferProduct": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.OfferProduct",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the product identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the product name."
        },
        "unit": {
          "type": "string",
          "description": "Gets or sets the product unit."
        }
      },
      "description": "Summarizes an offer's product.\r\n            A product or service created by Microsoft. In some cases, the product may be created by \r\n            a third party and listed in a catalog by Microsoft. A product may have more than one \r\n            offer associated with it, each with different sets of features and targeted at different customer needs."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.OfferLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.OfferLinks",
      "properties": {
        "learnMore": {
          "description": "Gets or sets the \"learn more\" link.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Contains links for learning more information about the offer."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.SubscriptionAddOnReferral]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.SubscriptionAddOnReferral]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SubscriptionAddOnReferral"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionAddOnReferral": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionAddOnReferral",
      "properties": {
        "id": {
          "type": "string",
          "description": "The referral identifier."
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity required.",
          "format": "int32"
        },
        "offerId": {
          "type": "string",
          "description": "The offer identifier."
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "sent",
            "received",
            "rejected",
            "expired",
            "processing",
            "cannot_process",
            "unknown",
            "completed",
            "failed_to_process"
          ],
          "description": "The status of the referral."
        },
        "createdDate": {
          "type": "string",
          "description": "Created date of the referral.",
          "format": "date-time"
        },
        "action": {
          "type": "string",
          "enum": [
            "none",
            "create",
            "increase",
            "decrease",
            "suspend"
          ],
          "description": "The intended action for the referral."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an addon referral for an existing subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscription]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscription]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscription"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscription": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscription",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the subscription identifier."
        },
        "offerId": {
          "type": "string",
          "description": "Gets or sets the offer identifier."
        },
        "entitlementId": {
          "type": "string",
          "description": "Gets or sets the entitlement (azure's subscription) identifier."
        },
        "offerName": {
          "type": "string",
          "description": "Gets or sets the offer name."
        },
        "friendlyName": {
          "type": "string",
          "description": "Gets or sets the friendly name for the subscription.\r\n            The friendly name is defined by the partner to help disambiguate the subscription."
        },
        "quantity": {
          "type": "integer",
          "description": "The quantity. A Read-only property defined by the unit type.\r\n            For example, in the case of license-based billing, this property is set to the license count.\r\n            For usage based subscriptions, this property is ignored (set to 0).",
          "format": "int32"
        },
        "unitType": {
          "type": "string",
          "description": "Gets or sets the type of units that define the quantity for the subscription."
        },
        "parentSubscriptionId": {
          "type": "string",
          "description": "Gets or sets the parent subscription identifier."
        },
        "hasPurchasableAddons": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the subscription has purchasable addons."
        },
        "creationDate": {
          "type": "string",
          "description": "Gets or sets the creation date.",
          "format": "date-time"
        },
        "effectiveStartDate": {
          "type": "string",
          "description": "Gets or sets the effective start date for this subscription, in date-time format. \r\n            The effective start date is used to back date a migrated subscription or to align it with another.",
          "format": "date-time"
        },
        "commitmentEndDate": {
          "type": "string",
          "description": "Gets or sets the commitment end date for this subscription, in date-time format.\r\n            For subscription which are not auto renewable, this represents a date far away in the future.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "suspended",
            "deleted"
          ],
          "description": "Gets or sets the subscription status."
        },
        "autoRenewEnabled": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the subscription is renewed automatically."
        },
        "isTrial": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the subscription is a trial one."
        },
        "billingType": {
          "type": "string",
          "enum": [
            "none",
            "usage",
            "license"
          ],
          "description": "Gets or sets a value indicating how the subscription is billed. For example, \"usage\" or \"license\".\r\n            Revisit this property - do we need this having UnitType."
        },
        "billingCycle": {
          "type": "string",
          "enum": [
            "unknown",
            "monthly",
            "annual",
            "none",
            "one_time"
          ],
          "description": "Gets or sets a value indicating the frequency with which the partner is billed for this subscription.\r\n            The default value is monthly."
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the actions."
        },
        "partnerId": {
          "type": "string",
          "description": "Gets or sets the MPN ID of the reseller of record, used in the indirect partner model."
        },
        "suspensionReasons": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Read-only. If the subscription was suspended, this property gets a value indicating why."
        },
        "attentionNeeded": {
          "type": "boolean",
          "description": "Gets or sets a value indicating if attention is needed for this subscription."
        },
        "attentionReason": {
          "type": "string",
          "description": "Gets or sets the reason why attention is required."
        },
        "actionTaken": {
          "type": "boolean",
          "description": "Gets or sets a value indicating if action is already taken on the subscription."
        },
        "contractType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "subscription",
            "product_key",
            "redemption_code"
          ],
          "description": "Read-only. Gets the type of the contract. For example, \"subscription\"."
        },
        "links": {
          "description": "Gets or sets the subscription links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.SubscriptionLinks"
        },
        "orderId": {
          "type": "string",
          "description": "The order identifier."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "The subscription resource represents the life cycle of a subscription and includes properties that define the states throughout the subscription life cycle.\r\n            A subscription lets a customer use a service for a certain period of time. Not all fields will apply to all subscriptions,\r\n            and many only apply at certain points in the life cycle, such as if a subscription is suspended or cancelled."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.SubscriptionLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.SubscriptionLinks",
      "properties": {
        "offer": {
          "description": "Gets or sets the offer.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "entitlement": {
          "description": "Gets or sets the entitlement.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "parentSubscription": {
          "description": "Gets or sets the parent subscription.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Describes the collection of links attached to a subscription resource."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.AdvisoryHoursServiceRequestMetadata": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.AdvisoryHoursServiceRequestMetadata",
      "properties": {
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Country"
          },
          "description": "Gets or sets the countries."
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Language"
          },
          "description": "Gets or sets the languages."
        },
        "technologies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Technology"
          },
          "description": "Gets or sets the technologies."
        }
      },
      "description": "Advisory hours service request metadata."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Country": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Country",
      "properties": {
        "isoCode": {
          "type": "string",
          "description": "Gets or sets the ISO Code."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name."
        }
      },
      "description": "Represent the Connect Us Country object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Language": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Language",
      "properties": {
        "isoCode": {
          "type": "string",
          "description": "Gets or sets the ISO code."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name."
        }
      },
      "description": "Represent the Connect Us Language object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Technology": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Technology",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name."
        },
        "code": {
          "type": "integer",
          "description": "Gets or sets the code.",
          "format": "int32"
        },
        "scenarios": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Scenario"
          },
          "description": "Gets or sets the scenarios."
        }
      },
      "description": "Represent the Connect Us Technology object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Scenario": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.Scenario",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name."
        },
        "code": {
          "type": "integer",
          "description": "Gets or sets the code.",
          "format": "int32"
        },
        "consultationTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.ConsultationType"
          },
          "description": "Gets or sets the consultation types."
        }
      },
      "description": "Represent the Connect Us Scenario object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.ConsultationType": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.ConsultationType",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the consultation type."
        },
        "code": {
          "type": "integer",
          "description": "Gets or sets the code.",
          "format": "int32"
        }
      },
      "description": "Represent the Connect Us Consultation Type object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.AdvisoryHoursServiceRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.ConnectUs.AdvisoryHoursServiceRequest",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Gets or sets the id.",
          "format": "int64"
        },
        "partnerId": {
          "type": "string",
          "description": "Gets or sets the PartnerId(MPNID)."
        },
        "title": {
          "type": "string",
          "description": "Gets or sets the Title."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets the Description."
        },
        "createdDate": {
          "type": "string",
          "description": "Gets or sets the created date.",
          "format": "date-time"
        },
        "preferredLanguageCode": {
          "type": "string",
          "description": "Gets or sets language code."
        },
        "routingCountryCode": {
          "type": "string",
          "description": "Gets or sets the country code."
        },
        "contactName": {
          "type": "string",
          "description": "Gets or sets the Contact Name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the PhoneNumber."
        },
        "email": {
          "type": "string",
          "description": "Gets or sets the email."
        },
        "billingHours": {
          "type": "number",
          "description": "Gets or sets the billing hours.",
          "format": "double"
        },
        "closedDate": {
          "type": "string",
          "description": "Gets or sets the closed date.",
          "format": "date-time"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Gets or sets is Status Open."
        },
        "isContractAvailable": {
          "type": "boolean",
          "description": "Gets or sets the isContractAvailable."
        }
      },
      "description": "Class that represents an advisory hour service request."
    },
    "System.Object": {
      "type": "object",
      "x-typeName": "System.Object"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.Application]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.Application]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.Application"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.Application": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.Application",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "The account Id."
        },
        "commerceId": {
          "type": "string",
          "description": "The commerce Id."
        },
        "domain": {
          "type": "string",
          "description": "The domain."
        },
        "objectId": {
          "type": "string",
          "description": "The application object Id."
        },
        "id": {
          "type": "string",
          "description": "The application Id."
        },
        "applicationType": {
          "type": "string",
          "enum": [
            "none",
            "native",
            "web"
          ],
          "description": "The application type."
        },
        "name": {
          "type": "string",
          "description": "The application name."
        },
        "identifierUris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The identifier Uris."
        },
        "credentialsUri": {
          "type": "string",
          "description": "The uri to get the credentials of the application."
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationResource"
          },
          "description": "List of resources."
        },
        "accessibleEndpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The endpoints to which the apps has access."
        },
        "authorizationUri": {
          "type": "string",
          "description": "The consent Uri to complete the application authorization."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Application."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationResource": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationResource",
      "properties": {
        "registrationResource": {
          "type": "string",
          "enum": [
            "none",
            "v1",
            "v2"
          ],
          "description": "The registration resource."
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "disabled"
          ],
          "description": "Registration status of the application."
        }
      },
      "description": "Resource for an application to register/unregister."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationCredential]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationCredential]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationCredential"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationCredential": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.Applications.ApplicationCredential",
      "properties": {
        "id": {
          "type": "string",
          "description": "The application credential Id."
        },
        "startDate": {
          "type": "string",
          "description": "The start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date.",
          "format": "date-time"
        },
        "password": {
          "description": "The password.",
          "$ref": "#/definitions/System.Security.SecureString"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "The application credential."
    },
    "System.Security.SecureString": {
      "type": "object",
      "x-typeName": "System.Security.SecureString",
      "properties": {
        "length": {
          "type": "integer",
          "readOnly": true,
          "format": "int32"
        }
      }
    },
    "Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims",
      "properties": {
        "accountId": {
          "type": "string",
          "description": "Gets or sets the account id."
        },
        "accountType": {
          "type": "string",
          "description": "Gets or sets the account type (ex. Tenant, PartnerLocation, PartnerGlobal)."
        },
        "accountRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the account roles for the above account."
        },
        "userRoles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the applicable user roles for the above account and the user in context."
        }
      },
      "description": "Represent the authorization claims."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.CartCheckoutResult": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.CartCheckoutResult",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
          },
          "description": "Gets or sets the orders created."
        },
        "orderErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.OrderError"
          },
          "description": "Gets or sets a collection of order failure information."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents the result of placing an order using a cart"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Order": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Order",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the order identifier."
        },
        "referenceCustomerId": {
          "type": "string",
          "description": "Gets or sets the reference customer identifier."
        },
        "billingCycle": {
          "type": "string",
          "enum": [
            "unknown",
            "monthly",
            "annual",
            "none",
            "one_time"
          ],
          "description": "Gets or sets the type of billing cycle for the selected offers.\r\n            The billing cycle type indicates the frequency with which the partner is billed for this order. \r\n            The default is \"Monthly\" at order creation. This field is applied upon successful creation of the order."
        },
        "currencyCode": {
          "type": "string",
          "description": "Gets or sets the currency code."
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OrderLineItem"
          },
          "description": "Gets or sets an itemized list of the offers the customer is purchasing.\r\n            Each order line item refers to the purchase data for one offer."
        },
        "creationDate": {
          "type": "string",
          "description": "Gets or sets the date and time the order was created.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "unknown",
            "completed",
            "pending",
            "cancelled"
          ],
          "description": "Gets or sets the order status."
        },
        "links": {
          "description": "Gets or sets the links corresponding to the order.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a collection of information needed to purchase offers represented by each order line item.\r\n            A partner places an order when a customer wants to buy a subscription from a list of offers."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.OrderError": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Orders.OrderError",
      "properties": {
        "orderGroupId": {
          "type": "string",
          "description": "Gets or sets the order group Id with failure."
        },
        "code": {
          "type": "integer",
          "description": "Gets or sets the error code associated with the issue.",
          "format": "int32"
        },
        "description": {
          "type": "string",
          "description": "Gets or sets the description of the issue."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an error that occured during order placement."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.OrderLineItem": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.OrderLineItem",
      "properties": {
        "lineItemNumber": {
          "type": "integer",
          "description": "Gets or sets the line item number.\r\n            Each line item in the collection has a unique line item number, ranging from 0 to count-1.",
          "format": "int32"
        },
        "offerId": {
          "type": "string",
          "description": "Gets or sets the offer identifier."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Gets or sets the identifier of the resulting subscription."
        },
        "parentSubscriptionId": {
          "type": "string",
          "description": "Gets or sets the identifier of the parent subscription for an add-on offer.\r\n            This parameter should only be set for an add-on offer purchase. It applies to\r\n            an Order PATCH operation only."
        },
        "provisioningContext": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets the provisioning context."
        },
        "friendlyName": {
          "type": "string",
          "description": "Gets or sets the friendly name for the subscription defined by the partner.\r\n            This is an optional parameter used to disambiguate subscriptions."
        },
        "quantity": {
          "type": "integer",
          "description": "Gets or sets the number of licenses for a licence-based subscription.",
          "format": "int32"
        },
        "partnerIdOnRecord": {
          "type": "string",
          "description": "Gets or sets the partner identifier on record.\r\n            When an indirect provider places an order on behalf of an indirect reseller, populate this field\r\n            with the MPN ID of the indirect reseller only (never the ID of the indirect provider).\r\n            This ensures proper accounting for incentives."
        },
        "links": {
          "description": "Gets the order's resulting contract information.\r\n            This is an out parameter only, any input values to it will be ignored.\r\n            Example: Contract: { contract_type:Subscription, contract_id: 06bfd4f8-742d-41c6-9042-bb95ae5b4a05 }",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLineItemLinks"
        }
      },
      "description": "Represents order information for one specific offer of a product.\r\n            An order contains an itemized list of offers, and each item is represented as an order line item."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLinks",
      "properties": {
        "provisioningStatus": {
          "description": "Gets or sets the link to the provisioning status.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Represents navigation links for an order, including \r\n            a link to order provisioning status."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLineItemLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Links.OrderLineItemLinks",
      "properties": {
        "subscription": {
          "description": "Gets or sets the link to the full subscription information.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "sku": {
          "description": "Gets or sets the SKU URI.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "provisioningStatus": {
          "description": "Gets or sets the Provisioning Status URI.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Represents navigation links for an order line item, including \r\n            a link to the full subscription associated with the order."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.CountryValidationRules": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.CountryValidationRules",
      "properties": {
        "iso2Code": {
          "type": "string",
          "description": "Gets or sets the ISO2 code."
        },
        "defaultCulture": {
          "type": "string",
          "description": "Gets or sets the default culture."
        },
        "isStateRequired": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the state/province is required."
        },
        "supportedStatesList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets a list of states/provinces for the country/region."
        },
        "supportedLanguagesList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets a list of supported languages."
        },
        "supportedCulturesList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets a list of supported cultures."
        },
        "isPostalCodeRequired": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether a postal code is required or not."
        },
        "postalCodeRegex": {
          "type": "string",
          "description": "Gets or sets a regular expression that defines the ZIP/postal code."
        },
        "isCityRequired": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether a city is required or not."
        },
        "isVatIdSupported": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether a VAT ID is required or not."
        },
        "taxIdFormat": {
          "type": "string",
          "description": "Gets or sets the tax ID format."
        },
        "taxIdSample": {
          "type": "string",
          "description": "Gets or sets the tax ID sample."
        },
        "vatIdRegex": {
          "type": "string",
          "description": "Gets or sets the tax ID regular expression."
        },
        "phoneNumberRegex": {
          "type": "string",
          "description": "Gets or sets the phone number regular expression."
        },
        "isTaxIdSupported": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether a tax ID is supported or not. Note that this is different than IsVatIdSupported."
        },
        "isTaxIdOptional": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether a tax ID is optional or not."
        },
        "countryCallingCodesList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the calling codes supported in the country/region."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the address formatting rules for a country/region."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Query.Filters.FieldFilter": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Query.Filters.FieldFilter",
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "not_equals",
            "greater_than",
            "greater_than_or_equals",
            "less_than",
            "less_than_or_equals",
            "substring",
            "and",
            "or",
            "starts_with",
            "not_starts_with"
          ],
          "description": "Gets or sets the filter operator."
        }
      },
      "description": "Represents a filter that can be applied to a search results field."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Customer]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Customer]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Customer"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Customer": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Customer",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the customer identifier."
        },
        "commerceId": {
          "type": "string",
          "description": "Gets or sets the commerce identifier."
        },
        "companyProfile": {
          "description": "Gets or sets the company profile. Additional information about the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerCompanyProfile"
        },
        "billingProfile": {
          "description": "Gets or sets the billing profile. Additional information used for billing.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile"
        },
        "relationshipToPartner": {
          "type": "string",
          "enum": [
            "unknown",
            "reseller",
            "advisor",
            "syndication",
            "microsoft_support",
            "none"
          ],
          "description": "Gets or sets the relationship to a partner, by defining the licensing program that the partner uses for this customer."
        },
        "allowDelegatedAccess": {
          "type": "boolean",
          "description": "Gets or sets a value that indicates whether the partner has been granted delegated admin privileges by this customer."
        },
        "userCredentials": {
          "description": "Gets or sets the user credentials.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserCredentials"
        },
        "associatedPartnerId": {
          "type": "string",
          "description": "Gets or sets the indirect reseller associated to this customer account.\r\n            This value can be set only by indirect CSP partners."
        },
        "customDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets a list of custom domains."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a customer resource. The base customer profile for CustomerCompany and CustomerBilling profiles."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.CustomerCompanyProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.CustomerCompanyProfile",
      "properties": {
        "tenantId": {
          "type": "string",
          "description": "Gets or sets the customer's tenant identifier for Azure AD. \r\n            This is also called a Microsoft ID."
        },
        "domain": {
          "type": "string",
          "description": "Gets or sets the customer's domain. (Example : contoso.onmicrosoft.com)"
        },
        "companyName": {
          "type": "string",
          "description": "The name of the company or organization."
        },
        "address": {
          "description": "The default address for the customer's company.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "email": {
          "type": "string",
          "description": "The email address for the customer's company."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Additional information about the company or organization."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.CustomerBillingProfile",
      "properties": {
        "id": {
          "type": "string",
          "description": "The profile identifier."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets the first name of the billing contact at the customer's company. \r\n            This is the person that invoices and other billing communication will be directed to."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the last name of the billing contact."
        },
        "email": {
          "type": "string",
          "description": "The email address of the billing contact."
        },
        "culture": {
          "type": "string",
          "description": "Gets or sets the customer's preferred culture for communication and currency, such as \"en-us\"."
        },
        "language": {
          "type": "string",
          "description": "Gets or sets the customer's preferred language for communication."
        },
        "companyName": {
          "type": "string",
          "description": "The name of the company or organization."
        },
        "defaultAddress": {
          "description": "The default address for the customer. \r\n            The address that bills are sent to, where the billing contact works.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Additional information used for billing the customer."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserCredentials": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserCredentials",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Gets or sets the name of the user."
        },
        "password": {
          "description": "Gets or sets the user's securely stored password.",
          "$ref": "#/definitions/System.Security.SecureString"
        }
      },
      "description": "Describes a user's login credentials."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Address": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Address",
      "properties": {
        "country": {
          "type": "string",
          "description": "Gets or sets the country/region in ISO country code format."
        },
        "region": {
          "type": "string",
          "description": "Gets or sets the region."
        },
        "city": {
          "type": "string",
          "description": "Gets or sets the city."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets the state."
        },
        "addressLine1": {
          "type": "string",
          "description": "Gets or sets the first line of the address."
        },
        "addressLine2": {
          "type": "string",
          "description": "Gets or sets the second line of the address. This property is optional."
        },
        "postalCode": {
          "type": "string",
          "description": "Gets or sets the ZIP code or postal code."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets the first name of a contact at the customer's company/organization."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the last name of a contact at the customer's company/organization."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the phone number of a contact at the customer's company/organization. This property is optional."
        }
      },
      "description": "Represents an address for a customer or partner."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.DirectoryRole",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the directory role."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the id of the directory role."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a customer directory role object."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.UserMember",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Gets or sets the display name for the user."
        },
        "userPrincipalName": {
          "type": "string",
          "description": "Gets or sets the name of the user principal."
        },
        "roleId": {
          "type": "string",
          "description": "The identifier of the user's role."
        },
        "id": {
          "type": "string",
          "description": "The identifier of the member."
        },
        "accountId": {
          "type": "string",
          "description": "Gets or sets the account id where role assignment is tied."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a user's member information."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "The customer identifier."
        },
        "customerName": {
          "type": "string",
          "description": "The customer name."
        },
        "workloadCode": {
          "type": "string",
          "description": "The workload code."
        },
        "productName": {
          "type": "string",
          "description": "The product name.\r\n            TODO : figure out locale for the names. Identify if they can come from catalog"
        },
        "licensesActive": {
          "type": "integer",
          "description": "The number of active licenses.",
          "format": "int64"
        },
        "licensesQualified": {
          "type": "integer",
          "description": "The number of qualified licenses.",
          "format": "int64"
        },
        "usagePercent": {
          "type": "number",
          "description": "The adjusted percentage of licenses used.",
          "format": "double"
        },
        "workloadName": {
          "type": "string",
          "description": "The workload name. (Examples : sharepoint, exchange)"
        },
        "processedDateTime": {
          "type": "string",
          "description": "The date and time when the data was aggregated.",
          "format": "date-time"
        },
        "serviceCode": {
          "type": "string",
          "description": "The service code of the license."
        },
        "serviceName": {
          "type": "string",
          "description": "The service name. (Example : Office, CRM)"
        },
        "channel": {
          "type": "string",
          "description": "The channel name of the service. (Example : reseller)"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains customer level insights about license usage."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "The customer identifier."
        },
        "customerName": {
          "type": "string",
          "description": "The customer name."
        },
        "productName": {
          "type": "string",
          "description": "The product name.\r\n            TODO : figure out locale for the names. Identify if they can come from catalog"
        },
        "licensesDeployed": {
          "type": "integer",
          "description": "The number of licenses deployed.",
          "format": "int64"
        },
        "deploymentPercent": {
          "type": "number",
          "description": "The adjusted percentage of licenses deployed.",
          "format": "double"
        },
        "licensesSold": {
          "type": "integer",
          "description": "The number of licenses sold.",
          "format": "int64"
        },
        "processedDateTime": {
          "type": "string",
          "description": "The date and time when the data was aggregated.",
          "format": "date-time"
        },
        "serviceCode": {
          "type": "string",
          "description": "The service code of the license."
        },
        "serviceName": {
          "type": "string",
          "description": "The service name. (Example : Office, CRM)"
        },
        "channel": {
          "type": "string",
          "description": "The channel name of the service. (Example : reseller)"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains customer level insights about license deployment."
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenseInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenseInsights",
      "properties": {
        "customerId": {
          "type": "string",
          "description": "Customer id"
        },
        "customerName": {
          "type": "string",
          "description": "Customer Name"
        },
        "customerCountryCode": {
          "type": "string",
          "description": "Customer Country Code"
        },
        "processedDateTime": {
          "type": "string",
          "description": "last Processed date for data",
          "format": "date-time"
        },
        "licensedServiceProducts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseServiceProduct"
          },
          "description": "Service insights of a customer scoped under a given partner."
        },
        "totalSubscriptionAllLicensedServices": {
          "type": "integer",
          "description": "Total subscription for license based services.",
          "format": "int64"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Business object model that represents License based insights for a customer\r\n            ToDo: get right contract names aligned to Graph/crest apis."
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseServiceProduct": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseServiceProduct",
      "properties": {
        "productId": {
          "type": "string",
          "description": "Product Id.\r\n            Needed to query usage for the product"
        },
        "productName": {
          "type": "string",
          "description": "Product Name\r\n            TODO : figure out locale for the names. Identify if they can come from catalog"
        },
        "serviceName": {
          "type": "string",
          "description": "Service Name like O365\r\n            ToDo: get right terminology from Graph/crest apis"
        },
        "licensesSold": {
          "type": "integer",
          "description": "License/seats sold as of processed date\r\n            ToDo: get right terminology from Graph/crest apis",
          "format": "int64"
        },
        "licensesSoldAllChannelAllPartner": {
          "type": "integer",
          "description": "License/seats customer sold as of processed date\r\n            ToDo: get right terminology from Graph/crest apis",
          "format": "int64"
        },
        "licensesDeployedAllChannelAllPartner": {
          "type": "integer",
          "description": "License/seats deployed as of processed date\r\n            ToDo: get right terminology from Graph/crest apis",
          "format": "int64"
        },
        "licensedWorkloads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseWorkload"
          },
          "description": "Workload insights of a customer scoped under a given partner, service \r\n            and product.\r\n            ToDo: get right terminology from Graph/crest apis"
        }
      },
      "description": "Business object model that represents products for a service"
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseWorkload": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseWorkload",
      "properties": {
        "friendlyName": {
          "type": "string",
          "description": "Workload names like sharepoint, exchange"
        },
        "licensesActiveAllChannelAllPartner": {
          "type": "integer",
          "description": "Total active seats as of processed time stamp.",
          "format": "int64"
        },
        "licensesEntitledAllChannelAllPartner": {
          "type": "integer",
          "description": "Total qualified entitlements as of processed time stamp.",
          "format": "int64"
        },
        "licensesTotalSoldSeats": {
          "type": "integer",
          "description": "Total sold seats per licenses as of processed timestamp.",
          "format": "int64"
        },
        "activePercent": {
          "type": "number",
          "description": "Percentage of active workload seats.",
          "format": "double"
        }
      },
      "description": "Business object model that represents work loads for products"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.OfferCategory]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.OfferCategory]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.OfferCategory"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerUsageSummary": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerUsageSummary",
      "properties": {
        "spendingBudget": {
          "type": "number",
          "description": "The spending budget allocated to a customer.\r\n            [Deprecated] This will be removed as soon as UI and SDK updates to the new property.",
          "format": "double"
        },
        "customerSpendingBudget": {
          "description": "To do: to be deprecated with next release. The spending budget allocated for a specific customer.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
        },
        "budget": {
          "description": "The spending budget allocated for the customer.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. \r\n            A GUID formatted string that is the ID of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this ID is the customer ID."
        },
        "id": {
          "type": "string",
          "description": "To do: to be deprecated soon: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this name is the customer name."
        },
        "name": {
          "type": "string",
          "description": "To do: to be deprecated soon - The name of the resource."
        },
        "billingStartDate": {
          "type": "string",
          "description": "Gets or sets the start date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "billingEndDate": {
          "type": "string",
          "description": "Gets or sets the end date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription during the specified billing period.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Getsd or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a summary of the customer's usage for an entire billing period."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget",
      "properties": {
        "amount": {
          "type": "number",
          "description": "The amount allocated to this customer for usage based subscriptions.\r\n            If this value is null, there is no spending budget allocated to the customer.",
          "format": "double"
        },
        "usageSpendingBudget": {
          "type": "number",
          "description": "To do: to be deprecated soon. Added for backward compatibility",
          "format": "double"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents the budget allocated to this customer for usage-based subscriptions."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord]",
      "properties": {
        "continuationToken": {
          "type": "string",
          "description": "Gets or sets the continuation token."
        },
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Paged Resource Collection"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.CustomerMonthlyUsageRecord",
      "properties": {
        "budget": {
          "description": "The spending budget allocated for the customer.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
        },
        "customerSpendingBudget": {
          "description": "To do: to be deprecated with next release. The spending budget allocated for a specific customer.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SpendingBudget"
        },
        "percentUsed": {
          "type": "number",
          "description": "The percentage used out of the allocated budget.",
          "format": "double"
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. A GUID formatted string."
        },
        "id": {
          "type": "string",
          "description": "To do: To be deprecated: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the resource."
        },
        "name": {
          "type": "string",
          "description": "To do: To be deprecated soon. The name of the resource."
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Gets or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents the estimated monetary cost of a customer's usage in the current month."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ManagedService]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ManagedService]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ManagedService"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ManagedService": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ManagedService",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the managed service identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the managed service."
        },
        "groupName": {
          "type": "string",
          "description": "Gets or sets the name of the group to which the service belongs."
        },
        "links": {
          "description": "Gets or sets the links corresponding to the managed service.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ManagedServiceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a managed service.\r\n            Managed services are services to which a partner has delegated admin privileges. \r\n            Partners can provide support for and file service requests on the behalf of their managed services."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ManagedServiceLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ManagedServiceLinks",
      "properties": {
        "adminService": {
          "description": "Gets or sets the admin service URI.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "serviceHealth": {
          "description": "Gets or sets the service health URI.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "serviceTicket": {
          "description": "Gets or sets the service ticket URI.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Contains the links that allow the partner with delegated admin permissions to provide support for the service."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerRelationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the partner identifier. \r\n            the partner identifier specifies the tenant ID of the partner who is\r\n            in the recipient (from) side of the partner relationship."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the friendly."
        },
        "relationshipType": {
          "type": "string",
          "enum": [
            "none",
            "is_indirect_reseller_of",
            "is_indirect_cloud_solution_provider_of"
          ],
          "description": "Gets or sets the type of relationship."
        },
        "state": {
          "type": "string",
          "description": "Gets or sets the state of the relationship. (Example : \"active\")"
        },
        "mpnId": {
          "type": "string",
          "description": "Gets or sets the Microsoft Partner Network (MPN) identifier of the partner."
        },
        "location": {
          "type": "string",
          "description": "Gets or sets the location of the partner."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a relationship between two partners."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest",
      "properties": {
        "title": {
          "type": "string",
          "description": "Gets or sets the service request title."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets the description."
        },
        "severity": {
          "type": "string",
          "enum": [
            "unknown",
            "critical",
            "moderate",
            "minimal"
          ],
          "description": "Gets or sets the severity."
        },
        "supportTopicId": {
          "type": "string",
          "description": "Gets or sets the ID of the support topic."
        },
        "supportTopicName": {
          "type": "string",
          "description": "Gets or sets the name of the support topic."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the ID of the service request."
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "open",
            "closed",
            "attention_needed"
          ],
          "description": "Gets or sets the status of the service request."
        },
        "organization": {
          "description": "Gets or sets the organization for which the service request is created.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestOrganization"
        },
        "primaryContact": {
          "description": "Gets or sets the primary contact on the service request.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestContact"
        },
        "lastUpdatedBy": {
          "description": "Gets or sets the \"Last Updated By\" contact for changes to the service request.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestContact"
        },
        "productName": {
          "type": "string",
          "description": "Gets or sets the name of the product that corresponds to the service request."
        },
        "productId": {
          "type": "string",
          "description": "Gets or sets the ID of the product."
        },
        "createdDate": {
          "type": "string",
          "description": "Gets or sets the date that the service request was created.",
          "format": "date-time"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the date that the service request was last modified.",
          "format": "date-time"
        },
        "lastClosedDate": {
          "type": "string",
          "description": "Gets or sets the date that the service request was last closed.",
          "format": "date-time"
        },
        "fileLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.FileInfo"
          },
          "description": "Gets or sets the collection of File Links that pertain to the service request."
        },
        "newNote": {
          "description": "Gets or sets a note that can be added to an existing service request.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestNote"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestNote"
          },
          "description": "Gets or sets a collection of notes added to the service request."
        },
        "countryCode": {
          "type": "string",
          "description": "Gets or sets the country corresponding to the service request."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a service request filed by a partner, including how that request is progressing."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestOrganization": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestOrganization",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the unique identifier of the organization."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the organization."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the phone number of the organization."
        }
      },
      "description": "Describes the organization for which the service request is created."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestContact": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestContact",
      "properties": {
        "organization": {
          "description": "Gets or sets the organization for which the service request is created.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestOrganization"
        },
        "contactId": {
          "type": "string",
          "description": "Gets or sets the contact's unique identifier."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the last name of the contact."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets the first name of the contact."
        },
        "email": {
          "type": "string",
          "description": "Gets or sets the email of the contact."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the phone number of the contact."
        }
      },
      "description": "Describes a contact that creates or modifies a service request."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.FileInfo": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.FileInfo",
      "properties": {
        "comment": {
          "type": "string",
          "description": "Gets or sets a comment associated with the file."
        },
        "extensionType": {
          "type": "string",
          "description": "Gets or sets file extension."
        },
        "fileNameWithoutExtension": {
          "type": "string",
          "description": "Gets or sets file name."
        },
        "fileSize": {
          "type": "integer",
          "description": "Gets or sets file size in bytes.",
          "format": "int64"
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the file identifier."
        },
        "location": {
          "type": "string",
          "description": "Gets or sets the file URI."
        }
      },
      "description": "Represents file information."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestNote": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestNote",
      "properties": {
        "createdByName": {
          "type": "string",
          "description": "Gets or sets the name of the creator of the note."
        },
        "createdDate": {
          "type": "string",
          "description": "Gets or sets the date and time when the note was created.",
          "format": "date-time"
        },
        "text": {
          "type": "string",
          "description": "Gets or sets the text of the note."
        },
        "updatedByName": {
          "type": "string",
          "description": "Gets or sets the name of the updated user of the note."
        }
      },
      "description": "Describes a note attached to a service request."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceRequest"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.SubscribedSku",
      "properties": {
        "availableUnits": {
          "type": "integer",
          "description": "Gets or sets the number of units available for assignment. This is calculated as total units - consumed units.",
          "format": "int32"
        },
        "activeUnits": {
          "type": "integer",
          "description": "Gets or sets the number of units active for assignment.",
          "format": "int32"
        },
        "consumedUnits": {
          "type": "integer",
          "description": "Gets or sets the number of units consumed.",
          "format": "int32"
        },
        "suspendedUnits": {
          "type": "integer",
          "description": "Gets or sets the number of units suspended.",
          "format": "int32"
        },
        "totalUnits": {
          "type": "integer",
          "description": "Gets or sets the total number of units. This is calculated as the sum of the active and warning units.",
          "format": "int32"
        },
        "warningUnits": {
          "type": "integer",
          "description": "Gets or sets the number of warning units.",
          "format": "int32"
        },
        "productSku": {
          "description": "Gets or sets the product SKU.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ProductSku"
        },
        "servicePlans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ServicePlan"
          },
          "description": "Gets or sets the collection of service plans of a product."
        },
        "capabilityStatus": {
          "type": "string",
          "description": "Gets or sets the SKU status of a product."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a subscribed product owned by a tenant."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ProductSku": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ProductSku",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the product identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets a localized display name for the product SKU. The user principal identifier."
        },
        "skuPartNumber": {
          "type": "string",
          "description": "Gets or sets a SKU part number name for the product.\r\n            For example, for Office 365 Plan E3, this value is \"EnterprisePack\".\r\n            This can be used in place of the ID if the ID is not available."
        },
        "targetType": {
          "type": "string",
          "description": "Gets or sets the target type of a product.\r\n            This property identifies whether the product is applicable to a \"User\" or a \"Tenant\".\r\n            For example, to determine all products that are applicable to user, filter where TargetType == \"User\"."
        },
        "licenseGroupId": {
          "type": "string",
          "enum": [
            "none",
            "group1",
            "group2",
            "group3"
          ],
          "description": "Gets or sets a group identifier that indicates the authority or service that manages the productSku license.\r\n            Products are separated into license groups for better manageability. \r\n            \"group1\" - All products whose licenses can be managed by Azure Active Directory (AAD).\r\n            \"group2\" - Minecraft product licenses."
        }
      },
      "description": "Describes product details."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ServicePlan": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ServicePlan",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Gets or sets the localized display name for the service plan."
        },
        "serviceName": {
          "type": "string",
          "description": "Gets or sets the service name."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the service plan identifier."
        },
        "capabilityStatus": {
          "type": "string",
          "description": "Gets or sets the status of the service plan."
        },
        "targetType": {
          "type": "string",
          "description": "Gets or sets the target type of the service plan.\r\n            This identifies whether the service plan is applicable to a \"User\" or a \"Tenant\".\r\n            For example, to determine all service plans that are applicable to user, filter where target type == \"User\"."
        }
      },
      "description": "Identifies a deployable service within a product SKU. A product can have many service plans."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.License",
      "properties": {
        "servicePlans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ServicePlan"
          },
          "description": "Gets or sets the collection of service plans that correspond to the license. Service plans refer to services that a user is assigned to use.\r\n            For example, Delve is a service plan which a user is either assigned to use or can be assigned to use."
        },
        "productSku": {
          "description": "Gets or sets the SKU of the product that corresponds to the license.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.ProductSku"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a user license."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseUpdate": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseUpdate",
      "properties": {
        "licensesToAssign": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseAssignment"
          },
          "description": "Gets or sets the list of licenses to be assigned."
        },
        "licensesToRemove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of product SKU identifiers of the licenses to remove."
        },
        "licenseWarnings": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseWarning"
          },
          "description": "Gets a list of warnings that occurred during license assignment. This is a read-only property."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides information used to assign or remove licenses from a user."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseAssignment": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseAssignment",
      "properties": {
        "excludedPlans": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the service plan identifiers to be excluded from availability to the user."
        },
        "skuId": {
          "type": "string",
          "description": "Gets or sets the product SKU identifier for the license."
        }
      },
      "description": "Provides the information needed for a license update operation."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseWarning": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UserLicenseManagement.LicenseWarning",
      "properties": {
        "code": {
          "type": "string",
          "description": "Gets or sets the warning code."
        },
        "message": {
          "type": "string",
          "description": "Gets or sets the warning message."
        },
        "servicePlans": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of service plan names associated with the warning."
        }
      },
      "description": "Contains warning information that occurred during a license update operation."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Query.Sort": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Query.Sort",
      "properties": {
        "sortField": {
          "type": "string",
          "description": "Gets or sets the sort field."
        },
        "sortDirection": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "description": "Gets or sets the sort direction."
        }
      },
      "description": "Specifies sort field and direction."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.CustomerUser]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.CustomerUser]",
      "properties": {
        "continuationToken": {
          "type": "string",
          "description": "Gets or sets the continuation token."
        },
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.CustomerUser"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Paged Resource Collection"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.CustomerUser": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.CustomerUser",
      "properties": {
        "usageLocation": {
          "type": "string",
          "description": "Gets or sets the usage location. The location where the user intends to use the license."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the user identifier."
        },
        "userPrincipalName": {
          "type": "string",
          "description": "Gets or sets the name of the user principal."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets the first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the last name of the user."
        },
        "displayName": {
          "type": "string",
          "description": "Gets or sets the display name of the user."
        },
        "immutableId": {
          "type": "string",
          "description": "Gets or sets the immutable id of the user."
        },
        "passwordProfile": {
          "description": "Gets or sets the user's password profile.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.PasswordProfile"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the user's phone number."
        },
        "lastDirectorySyncTime": {
          "type": "string",
          "description": "Gets or sets the last directory sync time for the user.\r\n            The last time that information for this user was synced between Azure Active Directory\r\n            and on-premises Active Directory. A date time value only appears if Azure AD Connect \r\n            sync is enabled. Otherwise, the value is null.",
          "format": "date-time"
        },
        "userDomainType": {
          "type": "string",
          "enum": [
            "none",
            "managed",
            "federated"
          ],
          "description": "Gets or sets user domain type."
        },
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ],
          "description": "Gets or sets the state of the user, for the deleted user this is \"Inactive\" and for the normal user it is \"Active\"."
        },
        "softDeletionTime": {
          "type": "string",
          "description": "Gets or sets the deleted time for the inactive user.\r\n            Represents the start of the thirty day period after which data associated with a deleted user is permanently deleted and therefore unrecoverable.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a customer user."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.PasswordProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.PasswordProfile",
      "properties": {
        "password": {
          "description": "Gets or sets the password.",
          "$ref": "#/definitions/System.Security.SecureString"
        },
        "forceChangePassword": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the password must be forcibly changed on the next login."
        }
      },
      "description": "Describes a specific password and indicates if that password needs to be changed."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatch",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets a GUID-formatted string that is associated with the batch of devices."
        },
        "createdBy": {
          "type": "string",
          "description": "Gets or sets the name of the tenant that created the collection."
        },
        "creationDate": {
          "type": "string",
          "description": "Gets or sets the data and time that the collection was created.",
          "format": "date-time"
        },
        "devicesCount": {
          "type": "integer",
          "description": "Gets or sets the number of devices in the collection.",
          "format": "int32"
        },
        "devicesLink": {
          "description": "Gets or sets a link to the devices contained in this batch.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a collection of devices associated with a customer."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatchCreationRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceBatchCreationRequest",
      "properties": {
        "batchId": {
          "type": "string",
          "description": "Gets or sets a GUID-formatted string that is associated with the batch of devices."
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
          },
          "description": "Sets the list of devices to be uploaded. Each object specifies a device. \r\n            The following combinations of fields for identifying a device are accepted:\r\n            hardwareHash + productKey, hardwareHash + serialNumber, hardwareHash + productKey + serialNumber,\r\n            hardwareHash only, productKey only, serialNumber + oemManufacturerName + modelName."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides the information required to create a device batch and populate it with devices."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets a GUID-formatted string that identifies the device."
        },
        "serialNumber": {
          "type": "string",
          "description": "Gets or sets the serial number uniquely associated with the device."
        },
        "productKey": {
          "type": "string",
          "description": "Gets or sets the product key uniquely associated with the device."
        },
        "hardwareHash": {
          "type": "string",
          "description": "Gets or sets the hardware hash associated with the device."
        },
        "modelName": {
          "type": "string",
          "description": "Gets or sets the model name associated with the device."
        },
        "oemManufacturerName": {
          "type": "string",
          "description": "Gets or sets the OEM manufacturer name associated with the device."
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/System.Collections.Generic.KeyValuePair[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.PolicyCategory,System.String]"
          },
          "description": "Gets or sets the list of policies assigned to the device."
        },
        "uploadedBy": {
          "type": "string",
          "description": "Gets or sets the ID of the tenant who uploaded the device."
        },
        "uploadedDate": {
          "type": "string",
          "description": "Gets or sets the UTC date and time the device details were uploaded.",
          "format": "date-time"
        },
        "allowedOperations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of HTTP methods allowed on a device sync. (Example : GET, PATCH, DELETE)"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides information about a device associated with a customer."
    },
    "System.Collections.Generic.KeyValuePair[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.PolicyCategory,System.String]": {
      "type": "object",
      "x-typeName": "System.Collections.Generic.KeyValuePair[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.PolicyCategory,System.String]",
      "properties": {
        "key": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "none",
            "o_o_b_e"
          ]
        },
        "value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.BatchUploadDetails": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.BatchUploadDetails",
      "properties": {
        "batchTrackingId": {
          "type": "string",
          "description": "Gets or sets the tracking ID, a GUID-formatted string that is associated with the batch of devices uploaded."
        },
        "status": {
          "type": "string",
          "enum": [
            "unknown",
            "queued",
            "processing",
            "finished",
            "finished_with_errors"
          ],
          "description": "Gets or sets the status of the batch upload."
        },
        "startedTime": {
          "type": "string",
          "description": "Gets or sets the date and time that the batch upload process started.",
          "format": "date-time"
        },
        "completedTime": {
          "type": "string",
          "description": "Gets or sets the date and time that the batch upload process completed.",
          "format": "date-time"
        },
        "devicesStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceUploadDetails"
          },
          "description": "Gets or sets the device status, an array of objects that specify the status of each device information upload."
        }
      },
      "description": "Describes the status of a device batch upload of information about each device in a list of devices."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceUploadDetails": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DeviceUploadDetails",
      "properties": {
        "deviceId": {
          "type": "string",
          "description": "Gets or sets a GUID-formatted string that is associated with the device."
        },
        "serialNumber": {
          "type": "string",
          "description": "Gets or sets the serial number uniquely associated with the device."
        },
        "productKey": {
          "type": "string",
          "description": "Gets or sets the product key uniquely associated with the device."
        },
        "status": {
          "type": "string",
          "enum": [
            "unknown",
            "queued",
            "processing",
            "finished",
            "finished_with_errors"
          ],
          "description": "Gets or sets the status of the device information upload."
        },
        "errorCode": {
          "type": "string",
          "description": "Gets or sets the HTTP status error code that is returned if the device upload fails."
        },
        "errorDescription": {
          "type": "string",
          "description": "Gets or sets the HTTP error description that is returned if the device upload fails."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the status of an upload of information about a device."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DevicePolicyUpdateRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.DevicePolicyUpdateRequest",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
          },
          "description": "Sets the list of devices to be updated. Each object specifies a device. \r\n            The following properties are required:  Id, Policies."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides the information required to update a list of devices with a policy."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device]",
      "properties": {
        "continuationToken": {
          "type": "string",
          "description": "Gets or sets the continuation token."
        },
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.Device"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Paged Resource Collection"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DeviceDeployment.ConfigurationPolicy",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets A GUID-formatted string that identifies the policy."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the friendly name for the policy."
        },
        "category": {
          "type": "string",
          "enum": [
            "none",
            "o_o_b_e"
          ],
          "description": "Gets or sets the category of the policy."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets the policy description."
        },
        "devicesAssignedCount": {
          "type": "integer",
          "description": "Gets or sets the number of devices assigned to this policy.",
          "format": "int32"
        },
        "policySettings": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "none",
              "removeOemPreinstalls",
              "oobeUserNotLocalAdmin",
              "skipExpressSettings",
              "skipOemRegistration",
              "skipEula"
            ]
          },
          "description": "Gets or sets the policy settings."
        },
        "createdDate": {
          "type": "string",
          "description": "Gets or sets the date and time the policy was created.",
          "format": "date-time"
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the date and time the policy was last modified.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides information about a configuration policy associated with a customer."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.VerifiedDomain": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.VerifiedDomain",
      "properties": {
        "verifiedDomainName": {
          "type": "string",
          "description": "Verified Domain Name"
        },
        "domain": {
          "description": "Domain",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.Domain"
        },
        "domainFederationSettings": {
          "description": "Domain federation settings",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.DomainFederationSettings"
        }
      },
      "description": "Represents VerifiedDomain request and response"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.Domain": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.Domain",
      "properties": {
        "authenticationType": {
          "type": "string",
          "enum": [
            "managed",
            "federated"
          ],
          "description": "Domain authentication type"
        },
        "capability": {
          "type": "string",
          "enum": [
            "none",
            "email",
            "sharepoint",
            "office_communications_online",
            "sharepoint_default",
            "full_redelegation",
            "share_point_public",
            "org_id_authentication",
            "yammer",
            "intune",
            "all"
          ],
          "description": "Domain Capability"
        },
        "isDefault": {
          "type": "boolean",
          "description": "Is default domain?"
        },
        "isInitial": {
          "type": "boolean",
          "description": "Is initial domain?"
        },
        "name": {
          "type": "string",
          "description": "Domain name"
        },
        "rootDomain": {
          "type": "string",
          "description": "Root Domain name"
        },
        "status": {
          "type": "string",
          "enum": [
            "unverified",
            "verified",
            "pending_deletion"
          ],
          "description": "Domain Status"
        },
        "verificationMethod": {
          "type": "string",
          "enum": [
            "none",
            "dns_record",
            "email"
          ],
          "description": "Domain Verification Method"
        }
      },
      "description": "Represents Customer or partner's domain"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.DomainFederationSettings": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.DomainFederationSettings",
      "properties": {
        "activeLogOnUri": {
          "type": "string",
          "description": "Active logon URI"
        },
        "defaultInteractiveAuthenticationMethod": {
          "type": "string",
          "description": "Default interaction authentication method"
        },
        "federationBrandName": {
          "type": "string",
          "description": "Federation brand name"
        },
        "issuerUri": {
          "type": "string",
          "description": "Issuer URI"
        },
        "logOffUri": {
          "type": "string",
          "description": "Logoff URI"
        },
        "metadataExchangeUri": {
          "type": "string",
          "description": "Meta data exchange URI"
        },
        "nextSigningCertificate": {
          "type": "string",
          "description": "Next Signing Certificate"
        },
        "openIdConnectDiscoveryEndpoint": {
          "type": "string",
          "description": "Open ID connect discovery endpoint"
        },
        "passiveLogOnUri": {
          "type": "string",
          "description": "Passive logon URI"
        },
        "preferredAuthenticationProtocol": {
          "type": "string",
          "enum": [
            "ws_fed",
            "samlp"
          ],
          "description": "Preferred authentication protocol"
        },
        "promptLoginBehavior": {
          "type": "string",
          "enum": [
            "translate_to_fresh_password_auth",
            "native_support",
            "disabled"
          ],
          "description": "Prompt login behavior"
        },
        "signingCertificate": {
          "type": "string",
          "description": "Signing Certificate"
        },
        "signingCertificateUpdateStatus": {
          "description": "Signing certificate update status",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.SigningCertificateUpdateStatus"
        },
        "supportsMfa": {
          "type": "boolean",
          "description": "Supports MFA?"
        }
      },
      "description": "Represents domain federation settings"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.SigningCertificateUpdateStatus": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.DomainManagement.SigningCertificateUpdateStatus",
      "properties": {
        "lastRunAt": {
          "type": "string",
          "description": "Last Run At",
          "format": "date-time"
        },
        "result": {
          "type": "integer",
          "description": "Result",
          "format": "int32"
        }
      },
      "description": "Represents Signing Certificate Update Status"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.EnrolledProgram": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.EnrolledProgram",
      "properties": {
        "programName": {
          "type": "string",
          "enum": [
            "none",
            "reseller",
            "advisor",
            "partner_network",
            "partner_network_local",
            "value_added_reseller",
            "value_added_reseller_partner_network",
            "partner_incentives",
            "app_dev",
            "app_middleware",
            "azure",
            "beam",
            "bookings",
            "bot_framework",
            "bots",
            "compete",
            "cortana",
            "dev_previews",
            "edge",
            "game_publishing",
            "groove",
            "hardware",
            "i_o_s_bridge",
            "minecraft",
            "money_service",
            "m_s_i_p",
            "office",
            "office365_connectors",
            "office_developer_program",
            "ready_for10",
            "re_mix3d",
            "seller_dashboard",
            "skype_agents",
            "skype_bots",
            "u_g_c",
            "u_w_p",
            "web_pay",
            "xdp_analytics"
          ],
          "description": "The program name."
        },
        "program": {
          "type": "string",
          "description": "The program name."
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "not_registered",
            "initialized",
            "pending_qualification",
            "qualified",
            "denied",
            "active",
            "disabled",
            "suspended",
            "evicted",
            "closed",
            "expired",
            "offboarding"
          ],
          "description": "The program enrollment status."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an enrollment in a program."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Flight.InsiderProgram": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Flight.InsiderProgram",
      "properties": {
        "id": {
          "type": "string",
          "description": "The flight name"
        },
        "name": {
          "type": "string",
          "description": "The flight display name"
        },
        "enrollmentStatus": {
          "type": "boolean",
          "description": "Enrollment status of the partner in the flight"
        }
      },
      "description": "Flight details"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigration": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigration",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the migration batch ID"
        },
        "partnerId": {
          "type": "string",
          "description": "Gets or sets the CSP Partner ID"
        },
        "createdDate": {
          "type": "string",
          "description": "Gets or sets the batch created date",
          "format": "date-time"
        },
        "mosiCustomerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of customers to be migrated"
        }
      },
      "description": "Batch for migration from syndication to CSP."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigrationStatus": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Migration.SyndicationMigrationStatus",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the migration batch ID"
        },
        "partnerId": {
          "type": "string",
          "description": "Gets or sets the CSP Partner ID"
        },
        "customersData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.CustomerSyndicationMigration"
          },
          "description": "Gets or sets the migration data of customers"
        }
      },
      "description": "Status of migration from syndication to CSP."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Migration.CustomerSyndicationMigration": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Migration.CustomerSyndicationMigration",
      "properties": {
        "mosiCustomerId": {
          "type": "string",
          "description": "Gets or sets the Mosi customer ID"
        },
        "customerName": {
          "type": "string",
          "description": "Gets or sets the customer name."
        },
        "tenantId": {
          "type": "string",
          "description": "Gets or sets the Mosi tenant Id."
        },
        "cspCustomerId": {
          "type": "string",
          "description": "Gets or sets the CSP customer Id."
        },
        "status": {
          "type": "string",
          "description": "Gets or sets the status of migration"
        },
        "errorDetails": {
          "type": "string",
          "description": "Gets or sets the error details if the migration fails"
        },
        "errorCode": {
          "type": "string",
          "description": "Gets or sets the error code if the migration fails"
        },
        "migratedSubscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Migration.SubscriptionSyndicationMigrationStatus"
          },
          "description": "Gets or sets the migrated CSP subscriptions."
        }
      },
      "description": "Status of customer migration from syndication to CSP."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Migration.SubscriptionSyndicationMigrationStatus": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Migration.SubscriptionSyndicationMigrationStatus",
      "properties": {
        "mosiSubscriptionId": {
          "type": "string",
          "description": "Gets or sets the Mosi customer ID"
        },
        "cspSubscriptionId": {
          "type": "string",
          "description": "Gets or sets the CSP subscription ID"
        },
        "cspSubscriptionOfferId": {
          "type": "string",
          "description": "Gets or sets the CSP subscription offer ID"
        },
        "cspSubscriptionStartDate": {
          "type": "string",
          "description": "Gets or sets the subscription start date",
          "format": "date-time"
        },
        "cspSubscriptionEndDate": {
          "type": "string",
          "description": "Gets or sets the subscription end date",
          "format": "date-time"
        }
      },
      "description": "Status of subscription migration from syndication to CSP."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.CommunicationPreference": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.CommunicationPreference",
      "properties": {
        "channel": {
          "type": "string",
          "enum": [
            "none",
            "email",
            "web"
          ],
          "description": "Gets or sets the Channel for communication"
        },
        "endpoint": {
          "type": "string",
          "description": "Gets or sets the email address used for communication"
        },
        "status": {
          "type": "string",
          "enum": [
            "not_supported",
            "on",
            "off"
          ],
          "description": "Gets or sets the status for a Channel"
        },
        "featurePreferences": {
          "type": "string",
          "description": "Gets or sets the feature preferences for a particular notification area."
        }
      },
      "description": "Represents the communication preference model"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.NotificationPreference": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.NotificationPreference",
      "properties": {
        "notificationArea": {
          "type": "string",
          "enum": [
            "none",
            "rated_usage",
            "service_health"
          ],
          "description": "Gets or sets the NotificationArea"
        },
        "locale": {
          "type": "string",
          "description": "Gets or sets the Locale"
        },
        "communicationPreferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.NotificationPreference.CommunicationPreference"
          },
          "description": "Gets or sets the communication preferences for a profile"
        }
      },
      "description": "Represents the notification preference model"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerOffer": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerOffer",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier of the product availability."
        },
        "name": {
          "type": "string",
          "description": "The name."
        },
        "description": {
          "type": "string",
          "description": "The description."
        },
        "productId": {
          "type": "string",
          "description": "The product Id."
        },
        "skuId": {
          "type": "string",
          "description": "The SKU Id."
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency code."
        },
        "currencySymbol": {
          "type": "string",
          "description": "The currency symbol."
        },
        "listPrice": {
          "type": "number",
          "description": "The list price.",
          "format": "double"
        },
        "locale": {
          "type": "string",
          "description": "The locale."
        },
        "country": {
          "type": "string",
          "description": "The country."
        }
      },
      "description": "Represents a product availability to a partner."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Order]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Order]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerClaims": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerClaims",
      "properties": {
        "authorizationClaims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.AuthorizationClaims"
          },
          "description": "Gets or sets the applicable authorization claims (the account roles and user roles for each of the accounts in the connected account system)."
        },
        "cloudInstanceName": {
          "type": "string",
          "description": "Gets or sets the national cloud instance name (ex. Global, China, Germany, UnitedStatesGovernment etc.)."
        },
        "graphAccessToken": {
          "type": "string",
          "description": "Gets or sets the graph access token."
        },
        "isIncomplete": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether the authorization claims list is incomplete or not."
        },
        "passedMFACheck": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether mfa check has passed."
        },
        "requiresMFAEnforcement": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether MFA enforcement is required."
        }
      },
      "description": "Represents a set of claims for the partner principal, the primary ones being the partner type and the authorization roles."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerDetails": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerDetails",
      "properties": {
        "aadPartnerType": {
          "type": "string",
          "enum": [
            "none",
            "reseller",
            "advisor",
            "company",
            "syndication",
            "microsoft_support",
            "value_added_reseller"
          ],
          "description": "Partner type flag in AAD"
        },
        "hasDapPrivileges": {
          "type": "boolean",
          "description": "Boolean to indicate if the partner has DAP privileges"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Partner Details"
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.PartnerLicenseInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.PartnerLicenseInsights",
      "properties": {
        "processedDateTime": {
          "type": "string",
          "description": "last Processed date for data",
          "format": "date-time"
        },
        "serviceName": {
          "type": "string",
          "description": "Service Name like O365\r\n            ToDo: get right terminology from Graph/crest apis"
        },
        "serviceInsightsType": {
          "type": "string",
          "enum": [
            "none",
            "license",
            "meter"
          ],
          "description": "Service insights type."
        },
        "totalCustomers": {
          "type": "integer",
          "description": "Total customers as of processed time stamp.",
          "format": "int64"
        },
        "totalSubscriptions": {
          "type": "integer",
          "description": "Total subscription count as of processed time stamp.",
          "format": "int64"
        },
        "totalSoldSeats": {
          "type": "integer",
          "description": "Total sold seats as of processed time stamp.",
          "format": "int64"
        },
        "totalDeployedSeatsAllChannelAllPartner": {
          "type": "integer",
          "description": "Total deployed seats as of processed time stamp.",
          "format": "int64"
        },
        "totalCustomerSoldSeats": {
          "type": "integer",
          "description": "Total seats sold to all customers (of this partner) by all partners as of processed time stamp.",
          "format": "int64"
        },
        "rollingMetrics": {
          "description": "Rolling metrics of this partner as of processed time stamp.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.PartnerLicenseRollingServiceInsights"
        },
        "workloads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.LicenseWorkload"
          },
          "description": "Workload insights of a customer scoped under a given partner, service\r\n            and product."
        },
        "deploymentPercent": {
          "type": "number",
          "description": "Percentage of licenses deployed by customers of this partner",
          "format": "double"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Business object model that represents License based insights for a partner across all customers"
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.PartnerLicenseRollingServiceInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.PartnerLicenseRollingServiceInsights",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Rolling metrics consider the data only after this timestamp",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Rolling metrics consider the data only before this timestamp",
          "format": "date-time"
        },
        "customersCount": {
          "type": "integer",
          "description": "New customer count between compute_start_time and compute_end_time.",
          "format": "int64"
        },
        "soldSeats": {
          "type": "integer",
          "description": "New sold seats count between compute_start_time and compute_end_time.",
          "format": "int64"
        },
        "deployedSeatsAllChannelAllPartner": {
          "type": "integer",
          "description": "New deployed seats count between compute_start_time and compute_end_time.",
          "format": "int64"
        },
        "subscriptionsCount": {
          "type": "integer",
          "description": "New subscription count between compute_start_time and compute_end_time.",
          "format": "int64"
        }
      },
      "description": "Business object model that contains service rolling insights of a partner scoped across all customers"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesDeploymentInsights",
      "properties": {
        "proratedDeploymentPercent": {
          "type": "number",
          "description": "The percentage of licenses deployed by customers of this partner.",
          "format": "double"
        },
        "licensesSold": {
          "type": "integer",
          "description": "The number of licenses sold.",
          "format": "int64"
        },
        "processedDateTime": {
          "type": "string",
          "description": "The date and time when the data was aggregated.",
          "format": "date-time"
        },
        "serviceCode": {
          "type": "string",
          "description": "The service code of the license."
        },
        "serviceName": {
          "type": "string",
          "description": "The service name. (Example : Office, CRM)"
        },
        "channel": {
          "type": "string",
          "description": "The channel name of the service. (Example : reseller)"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains partner level insights about license deployment."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.Analytics.PartnerLicensesUsageInsights",
      "properties": {
        "proratedLicensesUsagePercent": {
          "type": "number",
          "description": "The percentage of licenses deployed.",
          "format": "double"
        },
        "workloadName": {
          "type": "string",
          "description": "The workload name. (Examples : sharepoint, exchange)"
        },
        "processedDateTime": {
          "type": "string",
          "description": "The date and time when the data was aggregated.",
          "format": "date-time"
        },
        "serviceCode": {
          "type": "string",
          "description": "The service code of the license."
        },
        "serviceName": {
          "type": "string",
          "description": "The service name. (Example : Office, CRM)"
        },
        "channel": {
          "type": "string",
          "description": "The channel name of the service. (Example : reseller)"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains partner level insights about license usage."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerDeploymentUsageInsight]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerDeploymentUsageInsight]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerDeploymentUsageInsight"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerDeploymentUsageInsight": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerDeploymentUsageInsight",
      "properties": {
        "customerLicensesDeploymentInsight": {
          "description": "Customer Licenses Deployment Insight",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesDeploymentInsights"
        },
        "customerLicensesUsageInsights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.Analytics.CustomerLicensesUsageInsights"
          },
          "description": "Collection of CustomerWorkloadUsageInsights"
        }
      },
      "description": "Deployment and Usage insight for Customers of a Partner"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenses]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenses]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenses"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenses": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Internal.Contracts.Analytics.CustomerLicenses",
      "properties": {
        "processedTimestamp": {
          "type": "string",
          "description": "last Processed date for data",
          "format": "date-time"
        },
        "customerName": {
          "type": "string",
          "description": "Customer Name"
        },
        "customerId": {
          "type": "string",
          "description": "Customer Tenant Id"
        },
        "customerCountryCode": {
          "type": "string",
          "description": "Country Code"
        },
        "channelName": {
          "type": "string",
          "description": "Channel Name"
        },
        "serviceName": {
          "type": "string",
          "description": "Service Name"
        },
        "productName": {
          "type": "string",
          "description": "Product Name"
        },
        "workloadName": {
          "type": "string",
          "description": "Workload Name"
        },
        "totalSoldSeats": {
          "type": "integer",
          "description": "Total Sold Seats",
          "format": "int64"
        },
        "totalDeployedSeats": {
          "type": "integer",
          "description": "Total Deployed Seats",
          "format": "int64"
        },
        "totalSeats": {
          "type": "integer",
          "description": "Total Seats",
          "format": "int64"
        },
        "totalActiveSeats": {
          "type": "integer",
          "description": "Total Active Seats",
          "format": "int64"
        },
        "serviceCode": {
          "type": "string",
          "description": "Service code of the given service (O365, CRM)"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Business object model that represents a flat list of Licenses insights for a partner across all customers"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerOrder": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerOrder",
      "properties": {
        "id": {
          "type": "string",
          "description": "The order Id."
        },
        "creationDate": {
          "type": "string",
          "description": "The date the order was created.",
          "format": "date-time"
        },
        "currencyCode": {
          "type": "string",
          "description": "The currency code."
        },
        "currencySymbol": {
          "type": "string",
          "description": "The currency symbol."
        },
        "status": {
          "type": "string",
          "enum": [
            "none",
            "purchased",
            "refunded"
          ],
          "description": "The status of the order."
        },
        "subtotal": {
          "type": "number",
          "description": "The amount of the order before taxes are applied.",
          "format": "double"
        },
        "taxAmount": {
          "type": "number",
          "description": "The tax amount applied to the order.",
          "format": "double"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order after taxes are applied.",
          "format": "double"
        },
        "lineItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.PartnerOrderLineItem"
          },
          "description": "The line items included in the order."
        }
      },
      "description": "Defines an order placed by a partner for a partner offering."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerOrderLineItem": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerOrderLineItem",
      "properties": {
        "id": {
          "type": "string",
          "description": "The line item unique identifier."
        },
        "offer": {
          "description": "The offer information.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.PartnerOffer"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of item sold.",
          "format": "int32"
        },
        "subtotal": {
          "type": "number",
          "description": "The amount of the order before taxes are applied.",
          "format": "double"
        },
        "taxAmount": {
          "type": "number",
          "description": "The tax amount applied to the order.",
          "format": "double"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order after taxes are applied.",
          "format": "double"
        },
        "autoRenews": {
          "type": "boolean",
          "description": "Defines whether auto-renew is enabled."
        },
        "expirationDate": {
          "type": "string",
          "description": "The expiration date and time.",
          "format": "date-time"
        }
      },
      "description": "Defines a line item in a  partner order."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.OrganizationProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.OrganizationProfile",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the organization's identifier."
        },
        "companyName": {
          "type": "string",
          "description": "GEts or sets the name of the company or organization."
        },
        "defaultAddress": {
          "description": "Gets or sets the default address of the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "tenantId": {
          "type": "string",
          "description": "Gets or sets the tenant identifier."
        },
        "domain": {
          "type": "string",
          "description": "Gets or sets the company or organization's domain."
        },
        "email": {
          "type": "string",
          "description": "Gets or sets the company or organization's email"
        },
        "language": {
          "type": "string",
          "description": "Gets or sets the preferred language for communication."
        },
        "culture": {
          "type": "string",
          "description": "Gets or sets the preferred culture for communication and currency, such as \"en-us\"."
        },
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "mpn_profile",
            "billing_profile",
            "support_profile",
            "legal_business_profile",
            "organization_profile"
          ],
          "description": "Gets the partner profile type."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a partner's organization profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.LegalBusinessProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.LegalBusinessProfile",
      "properties": {
        "companyName": {
          "type": "string",
          "description": "Gets or sets the legal company name."
        },
        "address": {
          "description": "Gets or sets the address of the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "primaryContact": {
          "description": "Gets or sets the primary contact for the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contact"
        },
        "companyApproverAddress": {
          "description": "Gets or sets the company approver address.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "companyApproverEmail": {
          "type": "string",
          "description": "Gets or sets the company approver email."
        },
        "vettingStatus": {
          "type": "string",
          "enum": [
            "none",
            "pending",
            "authorized",
            "rejected"
          ],
          "description": "Gets or sets the vetting status."
        },
        "vettingSubStatus": {
          "type": "string",
          "enum": [
            "none",
            "entry",
            "email_ownership",
            "email_domain",
            "employment_verification",
            "decision",
            "other",
            "business_verification"
          ],
          "description": "Gets or sets the vetting sub status."
        },
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "mpn_profile",
            "billing_profile",
            "support_profile",
            "legal_business_profile",
            "organization_profile"
          ],
          "description": "Gets the partner profile type."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a partner's legal business profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contact": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contact",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "Gets or sets the contact's first name."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the contact's last name."
        },
        "email": {
          "type": "string",
          "description": "Gets or sets the contact's email address."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the contact's phone number."
        }
      },
      "description": "Describes contact information for a specific individual."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.SupportProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.SupportProfile",
      "properties": {
        "email": {
          "type": "string",
          "description": "Gets or sets the The email address associated with the profile."
        },
        "telephone": {
          "type": "string",
          "description": "Gets or sets the phone number associated with the profile."
        },
        "website": {
          "type": "string",
          "description": "Gets or sets the support website."
        },
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "mpn_profile",
            "billing_profile",
            "support_profile",
            "legal_business_profile",
            "organization_profile"
          ],
          "description": "Gets the partner profile type."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a partner's support profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.BillingProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.BillingProfile",
      "properties": {
        "companyName": {
          "type": "string",
          "description": "Gets or sets the billing company name."
        },
        "address": {
          "description": "Gets or sets the billing address of the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Address"
        },
        "primaryContact": {
          "description": "Gets or sets the primary contact for the company or organization.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contact"
        },
        "purchaseOrderNumber": {
          "type": "string",
          "description": "Gets or sets the company or organization's purchase order number."
        },
        "taxId": {
          "type": "string",
          "description": "Gets or sets the company or organization's tax Id."
        },
        "billingDay": {
          "type": "integer",
          "description": "Gets or sets the billing day.",
          "format": "int32"
        },
        "billingCurrency": {
          "type": "string",
          "description": "Gets or sets the currency used by the company or organization."
        },
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "mpn_profile",
            "billing_profile",
            "support_profile",
            "legal_business_profile",
            "organization_profile"
          ],
          "description": "OldProperty: Gets the partner profile type."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a partner's billing profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ResellerProgramProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ResellerProgramProfile",
      "properties": {
        "partnerTier": {
          "type": "string",
          "enum": [
            "none",
            "first_tier",
            "second_tier"
          ],
          "description": "Gets or sets the partner tier."
        },
        "isTipReseller": {
          "type": "boolean",
          "description": "Gets or sets a value indicating whether or not the reseller is a test in production reseller."
        },
        "qualifications": {
          "description": "Gets or sets Qualifications",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Qualifications"
        },
        "supportedCountries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the supported countries."
        },
        "cslTenantId": {
          "type": "string",
          "description": "Gets or sets the shared services tenant id."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "The reseller program profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Qualifications": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Qualifications",
      "properties": {
        "reselling": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "education",
              "governmentCommunityCloud"
            ]
          },
          "description": "TODO : Remove this property when code is migrated to use CustomerQualifications\r\n            Gets or sets Reselling such as Education, Nonprofit etc"
        },
        "customerQualifications": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "none",
              "education",
              "nonprofit",
              "governmentCommunityCloud"
            ]
          },
          "description": "Gets or sets Reseller - Customer Qualifications"
        },
        "specialPricing": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets Special Pricing such as Syndication, Syndication GoDaddy etc."
        }
      },
      "description": "Reseller Qualification"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.MpnProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.MpnProfile",
      "properties": {
        "partnerName": {
          "type": "string",
          "description": "Gets or sets the company or organization name."
        },
        "mpnId": {
          "type": "string",
          "description": "Gets or sets the Microsoft Partner Network ID."
        },
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "mpn_profile",
            "billing_profile",
            "support_profile",
            "legal_business_profile",
            "organization_profile"
          ],
          "description": "Gets the partner profile type."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a partner's Microsoft Partner Network profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.RelationshipRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.RelationshipRequest",
      "properties": {
        "url": {
          "type": "string",
          "description": "Gets or sets the relationship request URL."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a relationship request. Provides the URL by which a customer can establish a relationship with a partner."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.PartnerUsageSummary": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.PartnerUsageSummary",
      "properties": {
        "emailsToNotify": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of email addresses for notifications."
        },
        "customersOverBudget": {
          "type": "integer",
          "description": "The number of customers that are over budget.",
          "format": "int32"
        },
        "customersTrendingOver": {
          "type": "integer",
          "description": "The number of customers that are close to going over budget.",
          "format": "int32"
        },
        "customersWithUsageBasedSubscription": {
          "type": "integer",
          "description": "The number of customers with a usage-based subscription.",
          "format": "int32"
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. \r\n            A GUID formatted string that is the ID of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this ID is the customer ID."
        },
        "id": {
          "type": "string",
          "description": "To do: to be deprecated soon: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this name is the customer name."
        },
        "name": {
          "type": "string",
          "description": "To do: to be deprecated soon - The name of the resource."
        },
        "billingStartDate": {
          "type": "string",
          "description": "Gets or sets the start date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "billingEndDate": {
          "type": "string",
          "description": "Gets or sets the end date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription during the specified billing period.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Getsd or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a partner-level summary of usage budgeting for all customers with an Azure subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerUser]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.PartnerUser]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.PartnerUser"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerUser": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerUser",
      "properties": {
        "alternateEmailAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the alternate email addresses."
        },
        "userType": {
          "type": "string",
          "description": "Gets or sets the alternate UserType"
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the user identifier."
        },
        "userPrincipalName": {
          "type": "string",
          "description": "Gets or sets the name of the user principal."
        },
        "firstName": {
          "type": "string",
          "description": "Gets or sets the first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Gets or sets the last name of the user."
        },
        "displayName": {
          "type": "string",
          "description": "Gets or sets the display name of the user."
        },
        "immutableId": {
          "type": "string",
          "description": "Gets or sets the immutable id of the user."
        },
        "passwordProfile": {
          "description": "Gets or sets the user's password profile.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.PasswordProfile"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Gets or sets the user's phone number."
        },
        "lastDirectorySyncTime": {
          "type": "string",
          "description": "Gets or sets the last directory sync time for the user.\r\n            The last time that information for this user was synced between Azure Active Directory\r\n            and on-premises Active Directory. A date time value only appears if Azure AD Connect \r\n            sync is enabled. Otherwise, the value is null.",
          "format": "date-time"
        },
        "userDomainType": {
          "type": "string",
          "enum": [
            "none",
            "managed",
            "federated"
          ],
          "description": "Gets or sets user domain type."
        },
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ],
          "description": "Gets or sets the state of the user, for the deleted user this is \"Inactive\" and for the normal user it is \"Active\"."
        },
        "softDeletionTime": {
          "type": "string",
          "description": "Gets or sets the deleted time for the inactive user.\r\n            Represents the start of the thirty day period after which data associated with a deleted user is permanently deleted and therefore unrecoverable.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "PartnerUser Class that inherits from User."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Membership]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Membership]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Membership"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Membership": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Membership",
      "properties": {
        "roleId": {
          "type": "string",
          "description": "Gets or sets the id of the role."
        },
        "memberId": {
          "type": "string",
          "description": "Gets or sets the id of the member object."
        },
        "accountId": {
          "type": "string",
          "description": "Gets or sets the account id where role assignment is tied."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a membership object used as a contract for an object's membership."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.PartnerUserProfile": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.PartnerUserProfile",
      "properties": {
        "profileType": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "none",
            "certification",
            "assessment"
          ],
          "description": "Gets the profile type."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Base partner user profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.AssociatedPartnerUser]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.AssociatedPartnerUser]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.AssociatedPartnerUser"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.AssociatedPartnerUser": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.AssociatedPartnerUser",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the id of the associated user."
        },
        "profileType": {
          "type": "string",
          "enum": [
            "none",
            "certification",
            "assessment"
          ],
          "description": "Gets or sets partner user profile type."
        },
        "displayName": {
          "type": "string",
          "description": "Gets or sets the display name."
        },
        "userPrincipalName": {
          "type": "string",
          "description": "Gets or sets the name of the user principal."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents partner user who has an associated user profile."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Promotions.Promotion]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Internal.Promotions.Promotion]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Internal.Promotions.Promotion"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Internal.Promotions.Promotion": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Internal.Promotions.Promotion",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the Id of the promotion."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the promotion."
        },
        "isEnabled": {
          "type": "boolean",
          "description": "Gets or sets the is enabled property."
        },
        "offerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of supported offer ids."
        },
        "countries": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the list of support countries."
        },
        "startDate": {
          "type": "string",
          "description": "Gets or sets the start date of the promotion.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Gets or sets the end date of the promotion.",
          "format": "date-time"
        },
        "discountType": {
          "type": "string",
          "description": "Gets or sets the discount type of the promotion."
        },
        "discountValue": {
          "type": "number",
          "description": "Gets or sets the discount value of the promotion.",
          "format": "double"
        },
        "duration": {
          "type": "integer",
          "description": "Gets or sets the duration of the discount.",
          "format": "int32"
        },
        "durationUnitOfMeasure": {
          "type": "string",
          "enum": [
            "other",
            "day",
            "month",
            "year"
          ],
          "description": "Gets or sets the term unit of measure of the discount."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a collection of information related to promotion."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureRateCard": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureRateCard",
      "properties": {
        "locale": {
          "type": "string",
          "description": "Gets or sets the locale for the localizable properties in the rate card meters."
        },
        "currency": {
          "type": "string",
          "description": "Gets or sets the currency for the the meter rates."
        },
        "isTaxIncluded": {
          "type": "boolean",
          "description": "Gets or sets the value indicating whether tax is included or not. All rates are pretax, so this will always be returned as false."
        },
        "meters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureMeter"
          },
          "description": "Gets or sets a collection of AzureMeter meters."
        },
        "offerTerms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureOfferTerm"
          },
          "description": "Gets or sets a collection of AzureOfferTerm terms."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides real-time prices for Azure offers."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureMeter": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureMeter",
      "properties": {
        "id": {
          "type": "string",
          "description": "The meter unique identifier."
        },
        "name": {
          "type": "string",
          "description": "The name of the meter."
        },
        "rates": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "The rates.\r\n            Key - meter quantity\r\n            Value - meter rate"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the azure meter tags."
        },
        "category": {
          "type": "string",
          "description": "The category of the meter.\r\n            Example: Storage"
        },
        "subcategory": {
          "type": "string",
          "description": "The subcategory of the meter.\r\n            Example: Sku"
        },
        "region": {
          "type": "string",
          "description": "The region."
        },
        "unit": {
          "type": "string",
          "description": "The base unit for the rates."
        },
        "includedQuantity": {
          "type": "number",
          "description": "The included quantity which is free of charge.",
          "format": "double"
        },
        "effectiveDate": {
          "type": "string",
          "description": "The date this meter is in effect.",
          "format": "date-time"
        }
      },
      "description": "This class defines the meter included in an Azure rate card."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureOfferTerm": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RateCards.AzureOfferTerm",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the offer name."
        },
        "discount": {
          "type": "number",
          "description": "Gets or sets the applied discount if any.",
          "format": "double"
        },
        "excludedMeterIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the excluded meter IDs from the offer term, if any."
        },
        "effectiveDate": {
          "type": "string",
          "description": "Gets or sets the effective start date of the offer term.",
          "format": "date-time"
        }
      },
      "description": "Represents an offer term tied to an Azure rate card."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.RelationshipRequestDetails": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.RelationshipRequestDetails",
      "properties": {
        "partnerId": {
          "type": "string",
          "description": "Gets or sets the partner identifier."
        },
        "addressLines": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the address lines."
        }
      },
      "description": "Represents a relationship request contents with a partner."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.RoleManagement.Role",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the role."
        },
        "id": {
          "type": "string",
          "description": "Gets or sets the id of the role."
        },
        "category": {
          "type": "string",
          "enum": [
            "tenant",
            "partner_agent",
            "incentive",
            "mpn",
            "marketing",
            "referrals",
            "account_admin",
            "publisher",
            "developer"
          ],
          "description": "Gets or sets the category of the role."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a role object used as a contract for role operations."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidents]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidents]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidents"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidents": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidents",
      "properties": {
        "workload": {
          "type": "string",
          "description": "Workload display name"
        },
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail"
          },
          "description": "Gets or sets the Incident list"
        },
        "status": {
          "type": "string",
          "enum": [
            "normal",
            "information",
            "warning",
            "critical"
          ],
          "description": "Gets or sets the cumulative status of the service"
        },
        "messageCenterMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail"
          },
          "description": "Gets or sets the message center messages"
        }
      },
      "description": "Represents an office service health incident message"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the Incident ID"
        },
        "messageType": {
          "type": "string",
          "enum": [
            "none",
            "incident",
            "message_center",
            "all"
          ],
          "description": "Gets or sets the message type"
        },
        "startTime": {
          "type": "string",
          "description": "Gets or sets the Incident start time",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "Gets or sets the Incident End time",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "normal",
            "information",
            "warning",
            "critical"
          ],
          "description": "Gets or sets the status"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentHistory"
          },
          "description": "Gets or sets the Service Health messages"
        },
        "workload": {
          "type": "string",
          "description": "Gets or sets the workload name"
        },
        "affectedWorkloadNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Gets or sets the affected workload names"
        },
        "resolved": {
          "type": "boolean",
          "description": "Gets or sets the incident Resolved state"
        },
        "impactedArea": {
          "type": "string",
          "description": "Gets or sets the feature name"
        },
        "impactedCustomers": {
          "type": "integer",
          "description": "Gets or sets the affected tenant count",
          "format": "int32"
        },
        "serviceHealthLinks": {
          "description": "Gets or sets the link to redirect the user for action - set only for message center type messages.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ServiceHealthLinks"
        },
        "requiredBy": {
          "type": "string",
          "description": "Gets or sets the date by which partner is expected to complete an action - set only for message center type messages.",
          "format": "date-time"
        },
        "category": {
          "type": "string",
          "description": "Gets or sets the category of message center - set only for message center type messages."
        },
        "actionType": {
          "type": "string",
          "description": "Gets or sets the type of action to be followed up with - set only for message center type messages."
        },
        "severity": {
          "type": "string",
          "enum": [
            "normal",
            "information",
            "warning",
            "critical"
          ],
          "description": "Gets or sets the severity of the message - set only for message center type messages."
        }
      },
      "description": "Represents an office service health incident message"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentHistory": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentHistory",
      "properties": {
        "publishedTime": {
          "type": "string",
          "description": "Gets or sets the published time",
          "format": "date-time"
        },
        "messageText": {
          "type": "string",
          "description": "Gets or sets the Message text"
        }
      },
      "description": "Represents the message history for an office incident"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ServiceHealthLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Links.ServiceHealthLinks",
      "properties": {
        "followUpUrl": {
          "description": "Gets or sets the learn more link",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Navigation links for Offer"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.ServiceHealth.ServiceIncidentDetail"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestAttachmentsInfo": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.ServiceRequestAttachmentsInfo",
      "properties": {
        "workspaceId": {
          "type": "string",
          "description": "Gets or sets the service Request Id"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.FileInfo"
          },
          "description": "Gets or sets the attachments in a SR."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents the service request ticket attachment"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.SupportTopic]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.SupportTopic]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.SupportTopic"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.SupportTopic": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.SupportTopic",
      "properties": {
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the support topic."
        },
        "description": {
          "type": "string",
          "description": "Gets or sets the description of the support topic."
        },
        "id": {
          "type": "integer",
          "description": "Gets or sets the unique identifier of the support topic.",
          "format": "int32"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes a support topic. Service requests specify a support topic to ensure that they are processed quickly and effectively."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionProvisioningStatus": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionProvisioningStatus",
      "properties": {
        "skuId": {
          "type": "string",
          "description": "Gets or sets a GUID formatted string that identifies the product SKU."
        },
        "status": {
          "type": "string",
          "description": "Gets or sets a value indicating whether this subscription is provisioned."
        },
        "quantity": {
          "type": "integer",
          "description": "Gets or sets the subscription quantity after provisioning.",
          "format": "int32"
        },
        "endDate": {
          "type": "string",
          "description": "Gets or sets the end date of the subscription.",
          "format": "date-time"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides information about the provisioning status of a subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionRegistrationStatus": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.SubscriptionRegistrationStatus",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "description": "Gets or sets a GUID formatted string that identifies the subscription."
        },
        "status": {
          "type": "string"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Provides information about the provisioning status of a subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Conversion",
      "properties": {
        "offerId": {
          "type": "string",
          "description": "Gets or sets the offer identifier of the original, trial offer."
        },
        "targetOfferId": {
          "type": "string",
          "description": "Gets or sets the offer identifier for the target offer."
        },
        "orderId": {
          "type": "string",
          "description": "Gets or sets the order identifier."
        },
        "quantity": {
          "type": "integer",
          "description": "Gets or sets the number of licenses.  The default is the number of licenses in the trial subscription.",
          "format": "int32"
        },
        "billingCycle": {
          "type": "string",
          "enum": [
            "unknown",
            "monthly",
            "annual",
            "none",
            "one_time"
          ],
          "description": "Indicates how often the partner is charged for the subscription."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains information used to convert a trial subscription to a paid subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionResult": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionResult",
      "properties": {
        "subscriptionId": {
          "type": "string",
          "description": "The subscription identifier."
        },
        "offerId": {
          "type": "string",
          "description": "The original offer identifier."
        },
        "targetOfferId": {
          "type": "string",
          "description": "The target offer identifier."
        },
        "error": {
          "description": "The error encountered while attempting the conversion, if applicable.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionError"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents the result of performing a subscription conversion."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionError": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.ConversionError",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "other",
            "conversions_not_found"
          ],
          "description": "The error code associated with the issue."
        },
        "description": {
          "type": "string",
          "description": "The friendly text describing the issue."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an error that occurred during conversion."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact",
      "properties": {
        "supportTenantId": {
          "type": "string",
          "description": "Gets or sets a GUID formatted string that indicates the support contact's tenant identifier."
        },
        "supportMpnId": {
          "type": "string",
          "description": "Gets or sets the support contact's Microsoft Partner Network (MPN) identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the name of the support contact."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents a support contact for a customer's subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.SupportContact"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.Upgrade",
      "properties": {
        "targetOffer": {
          "description": "Gets or sets the offer of the target subscription.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Offer"
        },
        "upgradeType": {
          "type": "string",
          "enum": [
            "none",
            "upgrade_only",
            "upgrade_with_license_transfer"
          ],
          "description": "Gets or sets the type of upgrade."
        },
        "isEligible": {
          "type": "boolean",
          "description": "Gets or sets a value that indicates whether the upgrade can be performed."
        },
        "quantity": {
          "type": "integer",
          "description": "Gets or sets the quantity of the new offer to be purchased.  Defaults to the source subscription quantity.",
          "format": "int32"
        },
        "upgradeErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeError"
          },
          "description": "The reasons the upgrade cannot be performed, if applicable."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the behavior of an individual subscription upgrade resource."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeError": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeError",
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "other",
            "delegated_admin_permissions_disabled",
            "subscription_status_not_active",
            "conflicting_service_types",
            "concurrency_conflicts",
            "user_context_required",
            "subscription_add_ons_present",
            "subscription_does_not_have_any_upgrade_paths",
            "subscription_target_offer_not_found",
            "subscription_not_provisioned",
            "offer_does_not_support_billing_cycle"
          ],
          "description": "The error code associated with the issue."
        },
        "description": {
          "type": "string",
          "description": "Friendly text describing the error."
        },
        "additionalDetails": {
          "type": "string",
          "description": "Additional details regarding the error."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Represents an error for subscription upgrade eligibility. \r\n            Provides a reason why an upgrade cannot be performed."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeResult": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeResult",
      "properties": {
        "sourceSubscriptionId": {
          "type": "string",
          "description": "The identifier of the source subscription."
        },
        "targetSubscriptionId": {
          "type": "string",
          "description": "The identifier of the target subscription."
        },
        "upgradeType": {
          "type": "string",
          "enum": [
            "none",
            "upgrade_only",
            "upgrade_with_license_transfer"
          ],
          "description": "The type of upgrade."
        },
        "upgradeErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UpgradeError"
          },
          "description": "Errors encountered while attempting to perform the upgrade, if applicable."
        },
        "licenseErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UserLicenseError"
          },
          "description": "Errors encountered while attempting to migrate user licenses, if applicable."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the result of the subscription upgrade process."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UserLicenseError": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Subscriptions.UserLicenseError",
      "properties": {
        "userObjectId": {
          "type": "string",
          "description": "The unique identifier of the user object."
        },
        "name": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.MarketplaceServices.Core.ServiceFault"
          },
          "description": "A list of exceptions thrown when trying to perform the user license transfer."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes an error arising from a failed user license transfer."
    },
    "Microsoft.MarketplaceServices.Core.ServiceFault": {
      "type": "object",
      "x-typeName": "Microsoft.MarketplaceServices.Core.ServiceFault",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "source": {
          "type": "string"
        }
      }
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionUsageSummary": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionUsageSummary",
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. \r\n            A GUID formatted string that is the ID of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this ID is the customer ID."
        },
        "id": {
          "type": "string",
          "description": "To do: to be deprecated soon: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the subscription or resource. \r\n            In the context of CustomerMonthlyUsageRecord, this name is the customer name."
        },
        "name": {
          "type": "string",
          "description": "To do: to be deprecated soon - The name of the resource."
        },
        "billingStartDate": {
          "type": "string",
          "description": "Gets or sets the start date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "billingEndDate": {
          "type": "string",
          "description": "Gets or sets the end date of the current billing period, in date-time format.",
          "format": "date-time"
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription during the specified billing period.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Getsd or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes how much a specific subscription was used in the current billing period."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord]",
      "properties": {
        "continuationToken": {
          "type": "string",
          "description": "Gets or sets the continuation token."
        },
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Paged Resource Collection"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.AzureResourceMonthlyUsageRecord",
      "properties": {
        "category": {
          "type": "string",
          "description": "The Azure resource category."
        },
        "subcategory": {
          "type": "string",
          "description": "The Azure resource sub-category."
        },
        "quantityUsed": {
          "type": "number",
          "description": "The quantity of the Azure resource used.",
          "format": "double"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measure for the Azure resource."
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. A GUID formatted string."
        },
        "id": {
          "type": "string",
          "description": "To do: To be deprecated: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the resource."
        },
        "name": {
          "type": "string",
          "description": "To do: To be deprecated soon. The name of the resource."
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Gets or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "This class defines the monthly usage record for an Azure subscription resource"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionDailyUsageRecord]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionDailyUsageRecord]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionDailyUsageRecord"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionDailyUsageRecord": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionDailyUsageRecord",
      "properties": {
        "dateUsed": {
          "type": "string",
          "description": "Gets or sets the The day, in date-time format, that the subscription was used.",
          "format": "date-time"
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. A GUID formatted string."
        },
        "id": {
          "type": "string",
          "description": "To do: To be deprecated: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the resource."
        },
        "name": {
          "type": "string",
          "description": "To do: To be deprecated soon. The name of the resource."
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Gets or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes how much a subscription is used in a single day.\r\n            Note: The SubscriptionDailyUsageRecord resource is obsolete and may produce inaccurate results. \r\n            We recommend that you update your applications to use the APIs described in Get a customer's \r\n            utilization records for Azure and Get prices for Microsoft Azure instead."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.PagedResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord]",
      "properties": {
        "continuationToken": {
          "type": "string",
          "description": "Gets or sets the continuation token."
        },
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Paged Resource Collection"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.UsageManagement.SubscriptionMonthlyUsageRecord",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "none",
            "active",
            "suspended",
            "deleted"
          ],
          "description": "Gets or sets the status of the subscription."
        },
        "partnerOnRecord": {
          "type": "string",
          "description": "Gets or sets the MPN ID of the partner on record."
        },
        "offerId": {
          "type": "string",
          "description": "Gets or sets the unique identifier for the offer related to this subscription. A GUID formatted string."
        },
        "resourceId": {
          "type": "string",
          "description": "Gets or sets the resource unique identifier. A GUID formatted string."
        },
        "id": {
          "type": "string",
          "description": "To do: To be deprecated: The resource unique identifier."
        },
        "resourceName": {
          "type": "string",
          "description": "Gets or sets the name of the resource."
        },
        "name": {
          "type": "string",
          "description": "To do: To be deprecated soon. The name of the resource."
        },
        "totalCost": {
          "type": "number",
          "description": "Gets or sets the estimated total cost of using the resources in the subscription.",
          "format": "double"
        },
        "currencyLocale": {
          "type": "string",
          "description": "Gets or sets the locale in which the subscription was used, determines the currency to use on the invoice."
        },
        "lastModifiedDate": {
          "type": "string",
          "description": "Gets or sets the day, in date-time format, that this record was last modified.",
          "format": "date-time"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes how much a subscription is used in a single month."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Internal.ThirdPartyNotificationRequest.ThirdPartyNotificationRequest": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Internal.ThirdPartyNotificationRequest.ThirdPartyNotificationRequest",
      "properties": {
        "order": {
          "description": "order.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Order"
        },
        "catalogOffers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Offer"
          },
          "description": "offers array."
        }
      },
      "description": "ThirdPartyNotificationRequest."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Transfers.Transfer": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Transfers.Transfer",
      "properties": {
        "transferType": {
          "type": "string",
          "enum": [
            "none",
            "subscription",
            "customer",
            "asset"
          ],
          "description": "The transfer entity type."
        },
        "transferEntity": {
          "description": "The transfer entity.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Transfers.TransferEntity"
        },
        "id": {
          "type": "string",
          "description": "The transfer identifier."
        },
        "state": {
          "type": "string",
          "enum": [
            "none",
            "in_progress",
            "active",
            "decline",
            "expired",
            "revoked",
            "completed"
          ],
          "description": "The transfer state."
        },
        "creationDate": {
          "type": "string",
          "description": "The creation date of the transfer",
          "format": "date-time"
        },
        "expirationDate": {
          "type": "string",
          "description": "The expiration date of the transfer",
          "format": "date-time"
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Transfer represents information required to transfer a subscription(EA/Direct)[or in the future - customer/asset]."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Transfers.TransferEntity": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Transfers.TransferEntity",
      "properties": {
        "id": {
          "type": "string",
          "description": "The transfer entity identifier."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the source The transfer entity name."
        },
        "currentOwner": {
          "type": "string",
          "description": "Gets or sets the current owner identifier of the transfer entity"
        },
        "customerID": {
          "type": "string",
          "description": "Gets or sets the customer identifier"
        },
        "transferType": {
          "type": "string",
          "enum": [
            "none",
            "subscription",
            "customer",
            "asset"
          ],
          "description": "The transfer entity type."
        },
        "billingDetails": {
          "description": "Gets or sets the billing details for the subscription.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingDetails"
        },
        "transferEntityLinks": {
          "description": "Gets or sets the transfer entity linkes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Links.TransferEntityLinks"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets the properties. In the future, any properties that are used internally should be put in this property bag."
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "TransferEntity represents collection of information required to transfer a subscription(EA/Direct)."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingDetails": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingDetails",
      "properties": {
        "billingType": {
          "type": "string",
          "enum": [
            "none",
            "usage",
            "license"
          ],
          "description": "Gets or sets a value indicating how the subscription is billed. For example, \"usage\" or \"license\"."
        },
        "billingCycle": {
          "type": "string",
          "enum": [
            "unknown",
            "monthly",
            "annual",
            "none",
            "one_time"
          ],
          "description": "Gets or sets a value indicating the frequency with which the partner is billed for this subscription.\r\n            The default value is monthly."
        },
        "billingPeriod": {
          "description": "Gets or sets a value indicating the billing period details for the subscription.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingPeriod"
        },
        "billingAmount": {
          "type": "number",
          "description": "Gets or sets the billing amount\".",
          "format": "double"
        },
        "currency": {
          "type": "string",
          "description": "Gets or sets the billing currency\"."
        }
      },
      "description": "LastKnownBillingDetails represents billing information required to transfer the customer subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Links.TransferEntityLinks": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Links.TransferEntityLinks",
      "properties": {
        "order": {
          "description": "Gets or sets the order.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "subscription": {
          "description": "Gets or sets the subscription.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "self": {
          "description": "The self uri.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "next": {
          "description": "The next page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        },
        "previous": {
          "description": "The previous page of items.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.Link"
        }
      },
      "description": "Colleciton of links attached to a transfer entity."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingPeriod": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Transfers.LastKnownBillingPeriod",
      "properties": {
        "startDate": {
          "type": "string",
          "description": "Gets or sets a value indicating the start date.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "Gets or sets a value indicating the end date.",
          "format": "date-time"
        }
      },
      "description": "LastKnownBillingPeriod represents billing period(start date, end date) information required to transfer the customer subscription."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord]": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Collections.ResourceCollection[Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord]",
      "properties": {
        "totalCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Gets the total count.",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord"
          },
          "description": "Gets the collection items."
        },
        "links": {
          "description": "Gets or sets the links.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceLinks"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Contains a collection of resources with JSON properties to represent the output"
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureUtilizationRecord",
      "properties": {
        "usageStartTime": {
          "type": "string",
          "description": "Gets or sets the start of the usage aggregation time range.\r\n            The response is grouped by the time of consumption (when the resource was actually used vs. when was it reported to the billing system).",
          "format": "date-time"
        },
        "usageEndTime": {
          "type": "string",
          "description": "Gets or sets the end of the usage aggregation time range.\r\n            The response is grouped by the time of consumption (when the resource was actually used vs. when was it reported to the billing system).",
          "format": "date-time"
        },
        "resource": {
          "description": "Gets or sets the Azure resource.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureResource"
        },
        "quantity": {
          "type": "number",
          "description": "Gets or sets the quantity consumed of the Azure resource.",
          "format": "double"
        },
        "unit": {
          "type": "string",
          "description": "Gets or sets the type of quantity. (Example : hours, bytes)"
        },
        "infoFields": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets the key-value pairs of instance-level details. This object may be empty."
        },
        "instanceData": {
          "description": "Gets or sets an AzureInstanceData object that contains key-value pairs of instance level details.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureInstanceData"
        },
        "attributes": {
          "readOnly": true,
          "description": "Gets the attributes.",
          "$ref": "#/definitions/Microsoft.Partner.Sdk.Contracts.V1.Common.ResourceAttributes"
        }
      },
      "description": "Describes the properties of an Azure Utilization Record resource."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureResource": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureResource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Gets or sets the unique identifier of the Azure resource. Also known as resource ID or resource GUID."
        },
        "name": {
          "type": "string",
          "description": "Gets or sets the friendly name of the Azure resource being consumed."
        },
        "category": {
          "type": "string",
          "description": "Gets or sets the category of the consumed Azure resource."
        },
        "subcategory": {
          "type": "string",
          "description": "Gets or sets the sub-category of the consumed Azure resource."
        },
        "region": {
          "type": "string",
          "description": "Gets or sets the region of the consumed Azure resource."
        }
      },
      "description": "Describes the properties of an Azure resource."
    },
    "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureInstanceData": {
      "type": "object",
      "x-typeName": "Microsoft.Partner.Sdk.Contracts.V1.Contracts.Utilizations.AzureInstanceData",
      "properties": {
        "resourceUri": {
          "type": "string",
          "description": "Gets or sets the fully qualified Azure resource ID, which includes the resource groups and the instance name."
        },
        "location": {
          "type": "string",
          "description": "Gets or sets the region in which the service was run."
        },
        "partNumber": {
          "type": "string",
          "description": "Gets or sets the unique namespace used to identify the resource for Azure Marketplace 3rd party usage. This may be an empty string."
        },
        "orderNumber": {
          "type": "string",
          "description": "Gets or sets the unique namespace used to identify the 3rd party order for Azure Marketplace. This may be an empty string."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets the the resource tags specified by the user."
        },
        "additionalInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Gets or sets the the additional info fields."
        }
      },
      "description": "Describes the properties of an Azure Instance Data resource."
    }
  },
  "responses": {},
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "description": "Bearer authentication token",
      "name": "Authorization",
      "in": "header"
    }
  }
}